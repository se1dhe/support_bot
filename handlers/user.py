import logging
from typing import Union, Dict, List, Any, Optional
from datetime import datetime

from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, update
from sqlalchemy.orm import selectinload

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils.i18n import _
from utils.keyboards import KeyboardFactory
from utils.states import UserStates
from utils.paginator import Paginator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "user:create_ticket")
async def create_ticket_cmd_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ create_ticket_cmd!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_create_ticket(callback_query, session, state)


async def _process_create_ticket(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    )
    active_ticket_result = await session.execute(active_ticket_query)
    active_ticket = active_ticket_result.scalar_one_or_none()

    if active_ticket:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        await callback_query.message.edit_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_ticket.id}. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=KeyboardFactory.back_button("user:back_to_menu", user.language)
        )
        await callback_query.answer()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–∏–∫–µ—Ç–∞
    await callback_query.message.edit_text(
        "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã:</i>",
        reply_markup=KeyboardFactory.back_button("user:back_to_menu", user.language)
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await state.set_state(UserStates.CREATING_TICKET)
    await callback_query.answer()

    logger.info(f"User {user_id} started ticket creation")


@router.message(UserStates.CREATING_TICKET, F.text | F.photo | F.document | F.video)
async def process_ticket_creation_wrapper(message: Message, bot: Bot, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_ticket_creation!")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é
        from database import async_session_factory
        if async_session_factory:
            async with async_session_factory() as temp_session:
                return await _process_ticket_creation(message, bot, temp_session, state)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    else:
        return await _process_ticket_creation(message, bot, session, state)


async def _process_ticket_creation(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED])))
    active_ticket_result = await session.execute(active_ticket_query)
    active_ticket = active_ticket_result.scalar_one_or_none()

    if active_ticket:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        await message.answer(
            _(
                "error_already_has_active_ticket",
                user.language,
                ticket_id=active_ticket.id
            ),
            reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
    new_ticket = Ticket(
        user_id=user.id,
        status=TicketStatus.OPEN,
        subject=message.text[:50] + "..." if message.text and len(message.text) > 50 else message.text
    )
    session.add(new_ticket)
    await session.flush()  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–∏–∫–µ—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=new_ticket.id,
        sender_id=user.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    await session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    await message.answer(
        _(
            "ticket_created",
            user.language,
            ticket_id=new_ticket.id
        ) + "\n\n" +
        _(
            "ticket_sent_to_support",
            user.language
        ) + " " +
        _(
            "wait_for_moderator",
            user.language
        ),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(UserStates.MAIN_MENU)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    for moderator in moderators:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç"
        keyboard = KeyboardFactory.ticket_actions(TicketStatus.OPEN, new_ticket.id, moderator.language)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await bot.send_message(
                chat_id=moderator.telegram_id,
                text=f"üì© <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{new_ticket.id}</b>\n\n"
                     f"–û—Ç: {user.full_name}\n"
                     f"–¢–µ–º–∞: {new_ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}",
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"Failed to send notification to moderator {moderator.telegram_id}: {e}")

    logger.info(f"User {user_id} created ticket #{new_ticket.id}")


@router.callback_query(F.data == "user:ticket_history")
async def ticket_history_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ticket_history!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_ticket_history(callback_query, session, state)


async def _process_ticket_history(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tickets_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.created_at.desc())
    tickets_result = await session.execute(tickets_query)
    tickets = tickets_result.scalars().all()

    if not tickets:
        await callback_query.message.edit_text(
            _("ticket_history_title", user.language) + "\n\n" +
            _("no_closed_tickets", user.language),
            reply_markup=KeyboardFactory.back_button("user:back_to_menu", user.language)
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "text": f"–¢–∏–∫–µ—Ç #{ticket.id} - {ticket.subject or '–ë–µ–∑ —Ç–µ–º—ã'}",
            "subject": ticket.subject or _("no_subject", user.language),
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "closed_at": ticket.closed_at.strftime("%d.%m.%Y %H:%M") if ticket.closed_at else "–ù–µ –∑–∞–∫—Ä—ã—Ç",
            "rating": ticket.rating
        }
        for ticket in tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä –¥–ª—è —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    message_text = _("ticket_history_title", user.language) + "\n\n"

    for item in page_items:
        rating_stars = "‚≠ê" * int(item["rating"]) if item["rating"] else "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n"
            f"üîí –ó–∞–∫—Ä—ã—Ç: {item['closed_at']}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {rating_stars}\n\n"
        )

    message_text += _("page_info", user.language, current_page=1, total_pages=paginator.total_pages)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.paginated_list(
            tickets_data,
            0,
            page_size=5,
            action_prefix="ticket",
            back_callback="user:back_to_menu",
            language=user.language
        )
    )

    await state.set_state(UserStates.VIEWING_TICKET_HISTORY)
    await callback_query.answer()

    logger.info(f"User {user_id} viewed ticket history")


@router.callback_query(F.data == "user:active_ticket")
async def active_ticket_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ active_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ active_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_active_ticket(callback_query, bot, session, state)


async def _process_active_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    ).options(selectinload(Ticket.moderator))
    active_ticket_result = await session.execute(active_ticket_query)
    ticket = active_ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            _("active_ticket_title", user.language) + "\n\n" +
            _("no_active_tickets", user.language),
            reply_markup=KeyboardFactory.back_button("user:back_to_menu", user.language)
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    status_texts = {
        TicketStatus.OPEN: "üÜï " + _("status_open", user.language) + " (–æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)",
        TicketStatus.IN_PROGRESS: "üîÑ " + _("status_in_progress", user.language),
        TicketStatus.RESOLVED: "‚úÖ " + _("status_resolved", user.language) + " (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
        TicketStatus.CLOSED: "üîí " + _("status_closed", user.language)
    }

    message_text = (
        f"üìù <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_texts.get(ticket.status, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')}\n"
        f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )

    if ticket.moderator:
        message_text += f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ticket.moderator.full_name}\n"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
    if ticket.status == TicketStatus.RESOLVED:
        keyboard = KeyboardFactory.rating_keyboard(user.language)
        await state.set_state(UserStates.RATING_MODERATOR)
        await state.update_data(active_ticket_id=ticket.id)
    else:
        keyboard = KeyboardFactory.back_button("user:back_to_menu", user.language)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    await callback_query.message.edit_text(
        message_text,
        reply_markup=keyboard
    )

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    messages_query = select(TicketMessage).where(
        TicketMessage.ticket_id == ticket.id
    ).order_by(TicketMessage.sent_at.asc())
    messages_result = await session.execute(messages_query)
    messages = messages_result.scalars().all()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if messages:
        await callback_query.message.answer(_("message_history", user.language))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        max_messages = 20
        start_idx = max(0, len(messages) - max_messages)

        # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
        if len(messages) > max_messages:
            await callback_query.message.answer(
                f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        for msg in messages[start_idx:]:
            sender = "–í—ã" if msg.sender_id == user.id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
            time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

            if msg.message_type == MessageType.SYSTEM:
                await callback_query.message.answer(f"üîî <i>{msg.text}</i>")
            elif msg.message_type == MessageType.TEXT:
                await callback_query.message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
            elif msg.message_type == MessageType.PHOTO:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                await bot.send_photo(
                    chat_id=callback_query.from_user.id,
                    photo=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.VIDEO:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                await bot.send_video(
                    chat_id=callback_query.from_user.id,
                    video=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.DOCUMENT:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ''}" if msg.text else "")
                await bot.send_document(
                    chat_id=callback_query.from_user.id,
                    document=msg.file_id,
                    caption=caption
                )

    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
    if ticket.status == TicketStatus.IN_PROGRESS:
        await callback_query.message.answer(
            "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
        )
        await state.set_state(UserStates.SENDING_MESSAGE)
        await state.update_data(active_ticket_id=ticket.id)
    elif ticket.status == TicketStatus.OPEN:
        await callback_query.message.answer(
            _("wait_for_moderator_assignment", user.language)
        )

    await callback_query.answer()

    logger.info(f"User {user_id} viewed active ticket #{ticket.id}")


@router.message(UserStates.SENDING_MESSAGE, F.text | F.photo | F.document | F.video)
async def process_ticket_message_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_ticket_message!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_ticket_message!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    return await _process_ticket_message(message, bot, session, state)


async def _process_ticket_message(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.moderator))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket or not ticket.moderator:
        await message.answer(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç "
            "–∏–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=user.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    ticket.updated_at = datetime.now()

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(_("user_message_sent", user.language))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == MessageType.TEXT:
            await bot.send_message(
                chat_id=ticket.moderator.telegram_id,
                text=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                     f"–û—Ç: {user.full_name}\n\n"
                     f"{text}"
            )
        elif message_type == MessageType.PHOTO:
            await bot.send_photo(
                chat_id=ticket.moderator.telegram_id,
                photo=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.DOCUMENT:
            await bot.send_document(
                chat_id=ticket.moderator.telegram_id,
                document=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.VIDEO:
            await bot.send_video(
                chat_id=ticket.moderator.telegram_id,
                video=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
    except Exception as e:
        logger.error(f"Failed to send message to moderator {ticket.moderator.telegram_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. "
            "–ù–æ –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞."
        )

    logger.info(f"User {user_id} sent message to ticket #{ticket.id}")


@router.callback_query(F.data.startswith("rating:"))
async def process_rating_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_rating!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_rating!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_rating(callback_query, bot, session, state)


async def _process_rating(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    """
    user_id = callback_query.from_user.id
    rating = int(callback_query.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.RESOLVED)
    ).options(selectinload(Ticket.moderator))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket or not ticket.moderator:
        await callback_query.message.edit_text(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.",
            reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: —Å—Ç–∞–≤–∏–º –æ—Ü–µ–Ω–∫—É, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
    ticket.rating = rating
    ticket.status = TicketStatus.CLOSED
    ticket.closed_at = datetime.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ü–µ–Ω–∫–µ
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=user.id,
        message_type=MessageType.SYSTEM,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ {'‚≠ê' * rating} ({rating}/5)"
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_text(
        _("thank_you_for_rating", user.language) + "\n\n" +
        _("ticket_closed", user.language, ticket_id=ticket.id) + "\n\n" +
        _("create_new_ticket_info", user.language),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ü–µ–Ω–∫–µ
    try:
        await bot.send_message(
            chat_id=ticket.moderator.telegram_id,
            text=f"‚≠ê <b>–¢–∏–∫–µ—Ç #{ticket.id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É –Ω–∞ "
                 f"{'‚≠ê' * rating} ({rating}/5).\n\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!"
        )
    except Exception as e:
        logger.error(f"Failed to send rating notification to moderator {ticket.moderator.telegram_id}: {e}")

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"User {user_id} rated ticket #{ticket.id} with {rating}/5")


@router.callback_query(F.data == "user:change_language")
async def change_language_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ change_language!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_change_language(callback_query, session, state)


async def _process_change_language(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    await callback_query.message.edit_text(
        _("language_selection", user.language),
        reply_markup=KeyboardFactory.language_selection(user.language)
    )

    await callback_query.answer()

    logger.info(f"User {user_id} accessed language selection")


@router.callback_query(F.data == "user:back_to_menu")
async def back_to_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_back_to_menu(callback_query, session, state)


async def _process_back_to_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    await callback_query.message.edit_text(
        _("user_main_menu", user.language),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, user.language)
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"User {user_id} returned to main menu")


@router.callback_query(F.data.startswith("language:"))
async def process_language_selection_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_language_selection!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_language_selection(callback_query, session, state)


async def _process_language_selection(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    user_id = callback_query.from_user.id
    selected_language = callback_query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user.language = selected_language
    await session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    if selected_language == "ru":
        welcome_text = "üá∑üá∫ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"
    elif selected_language == "en":
        welcome_text = "üá¨üáß Language changed to English. Welcome to the support system!"
    elif selected_language == "uk":
        welcome_text = "üá∫üá¶ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É. –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
    else:
        welcome_text = "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
    await callback_query.message.edit_text(
        welcome_text + "\n\n" + _("user_main_menu", selected_language),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, selected_language)
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"User {user_id} changed language to {selected_language}")


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    dp.include_router(router)