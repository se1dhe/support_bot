import logging
from typing import Union, Dict, List, Any

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.future import select
from sqlalchemy.orm import selectinload

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils import (
    build_user_main_menu,
    build_ticket_actions_keyboard,
    build_tickets_list_keyboard,
    build_back_keyboard,
    build_rating_keyboard,
    UserStates,
    Paginator,
    TICKET_STATUS_EMOJI,
    RATING_EMOJI, build_language_keyboard
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "user:create_ticket")
async def create_ticket(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    await callback_query.message.edit_text(
        "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã:</i>",
        reply_markup=build_back_keyboard("user:back_to_menu")
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await state.set_state(UserStates.CREATING_TICKET)
    await callback_query.answer()


@router.message(UserStates.CREATING_TICKET, F.text | F.photo | F.document | F.video)
async def process_ticket_creation(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    )
    active_ticket_result = await session.execute(active_ticket_query)
    active_ticket = active_ticket_result.scalar_one_or_none()

    if active_ticket:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_ticket.id} "
            f"({TICKET_STATUS_EMOJI[active_ticket.status]} {active_ticket.status.value}). "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç
    new_ticket = Ticket(
        user_id=user.id,
        status=TicketStatus.OPEN,
        subject=message.text[:50] + "..." if message.text and len(message.text) > 50 else message.text
    )
    session.add(new_ticket)
    await session.flush()  # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —Ç–∏–∫–µ—Ç–∞

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=new_ticket.id,
        sender_id=user.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
    await session.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    await message.answer(
        f"‚úÖ –¢–∏–∫–µ—Ç #{new_ticket.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏. "
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞. "
        f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à —Ç–∏–∫–µ—Ç –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.",
        reply_markup=build_user_main_menu()
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.set_state(UserStates.MAIN_MENU)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    for moderator in moderators:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç"
        take_keyboard = InlineKeyboardBuilder()
        take_keyboard.add(InlineKeyboardButton(
            text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç",
            callback_data=f"mod:take_ticket:{new_ticket.id}"
        ))

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        try:
            await bot.send_message(
                chat_id=moderator.telegram_id,
                text=f"üì© <b>–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç #{new_ticket.id}</b>\n\n"
                     f"–û—Ç: {user.full_name}\n"
                     f"–¢–µ–º–∞: {new_ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n\n"
                     f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}",
                reply_markup=take_keyboard.as_markup()
            )
        except Exception as e:
            logger.error(f"Failed to send notification to moderator {moderator.telegram_id}: {e}")

    logger.info(f"User {user_id} created ticket #{new_ticket.id}")


@router.callback_query(F.data == "user:ticket_history")
async def ticket_history(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–æ–≤
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tickets_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.created_at.desc())
    tickets_result = await session.execute(tickets_query)
    tickets = tickets_result.scalars().all()

    if not tickets:
        await callback_query.message.edit_text(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
            reply_markup=build_back_keyboard("user:back_to_menu")
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "subject": ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã",
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "closed_at": ticket.closed_at.strftime("%d.%m.%Y %H:%M") if ticket.closed_at else "–ù–µ –∑–∞–∫—Ä—ã—Ç",
            "rating": ticket.rating
        }
        for ticket in tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    message_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤</b>\n\n"
    for item in page_items:
        stars = RATING_EMOJI.get(int(item["rating"])) if item["rating"] else "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n"
            f"üîí –ó–∞–∫—Ä—ã—Ç: {item['closed_at']}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {stars}\n\n"
        )

    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1} –∏–∑ {paginator.total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=build_tickets_list_keyboard(tickets_data, 0)
    )

    await state.set_state(UserStates.VIEWING_TICKET_HISTORY)
    await callback_query.answer()


@router.callback_query(F.data == "user:active_ticket")
async def active_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    ).options(selectinload(Ticket.moderator))
    active_ticket_result = await session.execute(active_ticket_query)
    ticket = active_ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            "üìù <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=build_back_keyboard("user:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    messages_query = select(TicketMessage).where(
        TicketMessage.ticket_id == ticket.id
    ).order_by(TicketMessage.sent_at.asc())
    messages_result = await session.execute(messages_query)
    messages = messages_result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    status_text = {
        TicketStatus.OPEN: "üÜï –û—Ç–∫—Ä—ã—Ç (–æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)",
        TicketStatus.IN_PROGRESS: "üîÑ –í —Ä–∞–±–æ—Ç–µ",
        TicketStatus.RESOLVED: "‚úÖ –†–µ—à–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
        TicketStatus.CLOSED: "üîí –ó–∞–∫—Ä—ã—Ç"
    }.get(ticket.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    message_text = (
        f"üìù <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )

    if ticket.moderator:
        message_text += f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ticket.moderator.full_name}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if ticket.status == TicketStatus.RESOLVED:
        await callback_query.message.edit_text(
            message_text,
            reply_markup=build_rating_keyboard()
        )
        await state.set_state(UserStates.RATING_MODERATOR)
        await state.update_data(active_ticket_id=ticket.id)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        if messages:
            await callback_query.message.answer("üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>")

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            max_messages = 20
            start_idx = max(0, len(messages) - max_messages)

            # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
            if len(messages) > max_messages:
                await callback_query.message.answer(
                    f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
            for msg in messages[start_idx:]:
                sender = "–í—ã" if msg.sender_id == user.id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

                if msg.message_type == MessageType.SYSTEM:
                    await callback_query.message.answer(f"üîî <i>{msg.text}</i>")
                elif msg.message_type == MessageType.TEXT:
                    await callback_query.message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
                elif msg.message_type == MessageType.PHOTO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                    await bot.send_photo(
                        chat_id=callback_query.from_user.id,
                        photo=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.VIDEO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                    await bot.send_video(
                        chat_id=callback_query.from_user.id,
                        video=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.DOCUMENT:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ""}" if msg.text else "")
                    await bot.send_document(
                        chat_id=callback_query.from_user.id,
                        document=msg.file_id,
                        caption=caption
                    )

            await callback_query.message.answer(
                "<i>–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–º–µ—Ç–∏–ª —Ç–∏–∫–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.</i>"
            )
        return
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        await callback_query.message.edit_text(
            message_text,
            reply_markup=build_back_keyboard("user:back_to_menu")
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
        if messages:
            await callback_query.message.answer("üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>")

            max_messages = 20
            start_idx = max(0, len(messages) - max_messages)

            if len(messages) > max_messages:
                await callback_query.message.answer(
                    f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
                )

            for msg in messages[start_idx:]:
                sender = "–í—ã" if msg.sender_id == user.id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

                if msg.message_type == MessageType.SYSTEM:
                    await callback_query.message.answer(f"üîî <i>{msg.text}</i>")
                elif msg.message_type == MessageType.TEXT:
                    await callback_query.message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
                elif msg.message_type == MessageType.PHOTO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                    await bot.send_photo(
                        chat_id=callback_query.from_user.id,
                        photo=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.VIDEO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                    await bot.send_video(
                        chat_id=callback_query.from_user.id,
                        video=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.DOCUMENT:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ""}" if msg.text else "")
                    await bot.send_document(
                        chat_id=callback_query.from_user.id,
                        document=msg.file_id,
                        caption=caption
                    )

        if ticket.status == TicketStatus.IN_PROGRESS:
            await callback_query.message.answer(
                "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
            )
            await state.set_state(UserStates.SENDING_MESSAGE)
            await state.update_data(active_ticket_id=ticket.id)
        else:
            await callback_query.message.answer(
                "<i>–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É.</i>"
            )

    await callback_query.answer()


@router.message(UserStates.SENDING_MESSAGE, F.text | F.photo | F.document | F.video)
async def process_ticket_message(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.moderator))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket or not ticket.moderator:
        await message.answer(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç "
            "–∏–ª–∏ –µ—â–µ –Ω–µ –ø—Ä–∏–Ω—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=user.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    ticket.updated_at = func.now()

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == MessageType.TEXT:
            await bot.send_message(
                chat_id=ticket.moderator.telegram_id,
                text=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                     f"–û—Ç: {user.full_name}\n\n"
                     f"{text}"
            )
        elif message_type == MessageType.PHOTO:
            await bot.send_photo(
                chat_id=ticket.moderator.telegram_id,
                photo=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.DOCUMENT:
            await bot.send_document(
                chat_id=ticket.moderator.telegram_id,
                document=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.VIDEO:
            await bot.send_video(
                chat_id=ticket.moderator.telegram_id,
                video=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: {user.full_name}\n\n"
                        f"{message.caption or ''}"
            )
    except Exception as e:
        logger.error(f"Failed to send message to moderator {ticket.moderator.telegram_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É. "
            "–ù–æ –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞."
        )

    logger.info(f"User {user_id} sent message to ticket #{ticket.id}")


@router.callback_query(F.data.startswith("rating:"))
async def process_rating(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    """
    user_id = callback_query.from_user.id
    rating = int(callback_query.data.split(":")[1])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.RESOLVED)
    ).options(selectinload(Ticket.moderator))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket or not ticket.moderator:
        await callback_query.message.edit_text(
            "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —Ç–∏–∫–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –±—ã–ª –∑–∞–∫—Ä—ã—Ç.",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: —Å—Ç–∞–≤–∏–º –æ—Ü–µ–Ω–∫—É, –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–∫—Ä—ã—Ç–∏—è
    ticket.rating = rating
    ticket.status = TicketStatus.CLOSED
    ticket.closed_at = func.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ü–µ–Ω–∫–µ
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=user.id,
        message_type=MessageType.SYSTEM,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ü–µ–Ω–∏–ª —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ {RATING_EMOJI[rating]} ({rating}/5)"
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.edit_text(
        f"üåü <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!</b>\n\n"
        f"–í—ã –æ—Ü–µ–Ω–∏–ª–∏ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ {RATING_EMOJI[rating]} ({rating}/5).\n"
        f"–¢–∏–∫–µ—Ç #{ticket.id} –∑–∞–∫—Ä—ã—Ç.\n\n"
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
        reply_markup=build_user_main_menu()
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—Ü–µ–Ω–∫–µ
    try:
        await bot.send_message(
            chat_id=ticket.moderator.telegram_id,
            text=f"‚≠ê <b>–¢–∏–∫–µ—Ç #{ticket.id} –∑–∞–∫—Ä—ã—Ç</b>\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} –æ—Ü–µ–Ω–∏–ª –≤–∞—à—É —Ä–∞–±–æ—Ç—É –Ω–∞ "
                 f"{RATING_EMOJI[rating]} ({rating}/5).\n\n"
                 f"–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É —Ä–∞–±–æ—Ç—É!"
        )
    except Exception as e:
        logger.error(f"Failed to send rating notification to moderator {ticket.moderator.telegram_id}: {e}")

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"User {user_id} rated ticket #{ticket.id} with {rating}/5")


@router.callback_query(F.data == "user:change_language")
async def change_language(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞
    """
    await callback_query.message.edit_text(
        "üåê <b>–í—ã–±–æ—Ä —è–∑—ã–∫–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:",
        reply_markup=build_language_keyboard()
    )

    await callback_query.answer()


@router.callback_query(F.data == "user:back_to_menu")
async def back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    await callback_query.message.edit_text(
        "üë§ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_user_main_menu()
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()