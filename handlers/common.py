# common.py
# ---------
import logging
from typing import Union

from aiogram import Router, F, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

import bot
from models import User, UserRole, Ticket, TicketStatus
from utils import (
    build_language_keyboard,
    build_user_main_menu,
    build_moderator_main_menu,
    build_admin_main_menu,
    UserStates, ModeratorStates, AdminStates
)
from utils.keyboards import build_main_reply_keyboard

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.message(CommandStart())
async def command_start(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
        user = User(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            role=UserRole.USER
        )
        session.add(user)
        await session.commit()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n\n"
            "Welcome to the support system!\n"
            "Please select your language:\n\n"
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
            reply_markup=build_language_keyboard()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await state.set_state(UserStates.SELECTING_LANGUAGE)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        # –°–æ–∑–¥–∞–µ–º Reply Keyboard –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        reply_markup = build_main_reply_keyboard(user.role)

        if user.role == UserRole.ADMIN:
            await message.answer(
                f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_admin_main_menu()
            )
            await state.set_state(AdminStates.MAIN_MENU)
        elif user.role == UserRole.MODERATOR:
            await message.answer(
                f"üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_moderator_main_menu()
            )
            await state.set_state(ModeratorStates.MAIN_MENU)
        else:
            await message.answer(
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_user_main_menu()
            )
            await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} ({username or first_name}) started the bot")

@router.message(F.text == "üìã –ú–µ–Ω—é")
async def reply_menu_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        return await command_start(message, session, state)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.role == UserRole.ADMIN:
        await message.answer(
            "üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_admin_main_menu()
        )
        await state.set_state(AdminStates.MAIN_MENU)
    elif user.role == UserRole.MODERATOR:
        await message.answer(
            "üîë –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_moderator_main_menu()
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
    else:
        await message.answer(
            "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} opened the menu using reply button")


@router.message(F.text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç")
async def reply_active_ticket_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if user.role == UserRole.MODERATOR:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        active_ticket_query = select(Ticket).where(
            (Ticket.moderator_id == user.id) &
            (Ticket.status == TicketStatus.IN_PROGRESS)
        )
        active_ticket_result = await session.execute(active_ticket_query)
        active_ticket = active_ticket_result.scalar_one_or_none()

        if active_ticket:
            # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å callback_data –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ back_to_ticket
            fake_callback = types.CallbackQuery(
                id="0",
                from_user=message.from_user,
                chat_instance="0",
                message=message,
                data=f"mod:back_to_ticket",
                json_string=""
            )
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é back_to_ticket
            from handlers.moderator import back_to_ticket
            await back_to_ticket(fake_callback, bot, session, state)
        else:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        # –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å callback_data –¥–ª—è –≤—ã–∑–æ–≤–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ active_ticket
        fake_callback = types.CallbackQuery(
            id="0",
            from_user=message.from_user,
            chat_instance="0",
            message=message,
            data="user:active_ticket",
            json_string=""
        )
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é active_ticket
        from handlers.user import active_ticket
        await active_ticket(fake_callback, bot, session, state)


# –î–æ–±–∞–≤—å—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –Ω–∞ Reply Keyboard
@router.message(F.text == "‚úèÔ∏è –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç")
async def reply_new_ticket_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ create_ticket –≤ handlers/user.py
    pass

@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
async def reply_ticket_history_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ticket_history –≤ handlers/user.py
    pass

@router.message(F.text == "üì® –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã")
async def reply_unassigned_tickets_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ unassigned_tickets –≤ handlers/moderator.py
    pass

@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def reply_my_stats_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ my_stats –≤ handlers/moderator.py
    pass

@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def reply_stats_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ stats –≤ handlers/admin.py
    pass

@router.message(F.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def reply_manage_mods_button(message: Message, session: AsyncSession, state: FSMContext):
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ manage_moderators –≤ handlers/admin.py
    pass

@router.message(Command("help"))
async def command_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "ü§ù <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"

        "<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "- –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç, –æ–ø–∏—Å–∞–≤ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n"
        "- –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç\n"
        "- –û–±—â–∞–π—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
        "- –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"

        "<b>–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "- –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã –≤ —Ä–∞–±–æ—Ç—É\n"
        "- –û–±—â–∞–π—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
        "- –û—Ç–º–µ—Ç—å—Ç–µ —Ç–∏–∫–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞\n\n"

        "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "- –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
    )

    await message.answer(help_text)
    logger.info(f"User {message.from_user.id} requested help")


@router.message(Command("menu"))
async def command_menu(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        return await command_start(message, session, state)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.role == UserRole.ADMIN:
        await message.answer(
            "üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_admin_main_menu()
        )
        await state.set_state(AdminStates.MAIN_MENU)
    elif user.role == UserRole.MODERATOR:
        await message.answer(
            "üîë –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_moderator_main_menu()
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
    else:
        await message.answer(
            "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} opened the menu")


@router.callback_query(F.data.startswith("language:"))
async def process_language_selection(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    user_id = callback_query.from_user.id
    selected_language = callback_query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    db_user = result.scalar_one_or_none()

    if db_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user.language = selected_language
        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if selected_language == "ru":
            welcome_text = "üá∑üá∫ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"
        elif selected_language == "en":
            welcome_text = "üá¨üáß Language changed to English. Welcome to the support system!"
        elif selected_language == "uk":
            welcome_text = "üá∫üá¶ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É. –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
        else:
            welcome_text = "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"

        # –°–æ–∑–¥–∞–µ–º Reply Keyboard
        reply_markup = build_main_reply_keyboard(db_user.role)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        await callback_query.message.edit_text(
            f"{welcome_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await callback_query.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Inline –º–µ–Ω—é
        await callback_query.message.answer(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=build_user_main_menu()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(UserStates.MAIN_MENU)

        logger.info(f"User {user_id} selected {selected_language} language")
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
        )
        logger.error(f"User {user_id} not found in database during language selection")
