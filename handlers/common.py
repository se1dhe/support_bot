# common.py
# ---------
import logging
from typing import Union

from aiogram import Router, F, types, Bot
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload

from models import User, UserRole, Ticket, TicketStatus, Message as TicketMessage, MessageType
from utils import (
    build_language_keyboard,
    build_user_main_menu,
    build_moderator_main_menu,
    build_admin_main_menu,
    build_back_keyboard,
    build_rating_keyboard,
    build_tickets_list_keyboard,
    UserStates, ModeratorStates, AdminStates,
    TICKET_STATUS_EMOJI, RATING_EMOJI
)
from utils.keyboards import build_main_reply_keyboard
from utils.paginator import Paginator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.message(CommandStart())
async def command_start(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –ë–î
        user = User(
            telegram_id=user_id,
            username=username,
            first_name=first_name,
            last_name=last_name,
            role=UserRole.USER
        )
        session.add(user)
        await session.commit()

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n\n"
            "Welcome to the support system!\n"
            "Please select your language:\n\n"
            "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É:",
            reply_markup=build_language_keyboard()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        await state.set_state(UserStates.SELECTING_LANGUAGE)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ —Ä–æ–ª—å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        # –°–æ–∑–¥–∞–µ–º Reply Keyboard –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        reply_markup = build_main_reply_keyboard(user.role)

        if user.role == UserRole.ADMIN:
            await message.answer(
                f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_admin_main_menu()
            )
            await state.set_state(AdminStates.MAIN_MENU)
        elif user.role == UserRole.MODERATOR:
            await message.answer(
                f"üîë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –º–æ–¥–µ—Ä–∞—Ç–æ—Ä {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_moderator_main_menu()
            )
            await state.set_state(ModeratorStates.MAIN_MENU)
        else:
            await message.answer(
                f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.full_name}!\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
                reply_markup=reply_markup
            )
            # –¢–∞–∫–∂–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Inline Keyboard
            await message.answer(
                "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_user_main_menu()
            )
            await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} ({username or first_name}) started the bot")


@router.message(F.text == "üìã –ú–µ–Ω—é")
async def reply_menu_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–µ–Ω—é" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        return await command_start(message, session, state)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.role == UserRole.ADMIN:
        await message.answer(
            "üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_admin_main_menu()
        )
        await state.set_state(AdminStates.MAIN_MENU)
    elif user.role == UserRole.MODERATOR:
        await message.answer(
            "üîë –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_moderator_main_menu()
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
    else:
        await message.answer(
            "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} opened the menu using reply button")


@router.message(F.text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç")
async def reply_active_ticket_button(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞: /start")

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    if user.role == UserRole.MODERATOR:
        await handle_moderator_active_ticket(message, bot, session, state, user)
    else:
        await handle_user_active_ticket(message, bot, session, state, user)


async def handle_moderator_active_ticket(message: Message, bot: Bot, session: AsyncSession, state: FSMContext,
                                         user: User):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    active_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    active_ticket_result = await session.execute(active_ticket_query)
    active_ticket = active_ticket_result.scalar_one_or_none()

    if not active_ticket:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    message_text = (
        f"üîÑ <b>–¢–∏–∫–µ—Ç #{active_ticket.id}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {active_ticket.user.full_name}\n"
        f"üìù –¢–µ–º–∞: {active_ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {active_ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π", callback_data=f"mod:resolve_ticket:{active_ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"mod:reassign_ticket:{active_ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="mod:back_to_menu"))

    await message.answer(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(ModeratorStates.WORKING_WITH_TICKET)
    await state.update_data(active_ticket_id=active_ticket.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
    if active_ticket.messages:
        await message.answer("üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>")

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        max_messages = 20
        start_idx = max(0, len(active_ticket.messages) - max_messages)

        # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
        if len(active_ticket.messages) > max_messages:
            await message.answer(
                f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(active_ticket.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
            )

        for msg in active_ticket.messages[start_idx:]:
            if msg.sender_id == active_ticket.user_id:
                sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            elif msg.sender_id == user.id:
                sender = "–í—ã"
            else:
                sender = "–°–∏—Å—Ç–µ–º–∞"

            time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

            if msg.message_type == MessageType.SYSTEM:
                await message.answer(f"üîî <i>{msg.text}</i>")
            elif msg.message_type == MessageType.TEXT:
                await message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
            elif msg.message_type == MessageType.PHOTO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.VIDEO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                await bot.send_video(
                    chat_id=message.from_user.id,
                    video=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.DOCUMENT:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ''}" if msg.text else "")
                await bot.send_document(
                    chat_id=message.from_user.id,
                    document=msg.file_id,
                    caption=caption
                )

        await message.answer(
            "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
        )


async def handle_user_active_ticket(message: Message, bot: Bot, session: AsyncSession, state: FSMContext, user: User):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    ).options(selectinload(Ticket.moderator))
    active_ticket_result = await session.execute(active_ticket_query)
    ticket = active_ticket_result.scalar_one_or_none()

    if not ticket:
        await message.answer(
            "üìù <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.",
            reply_markup=build_back_keyboard("user:back_to_menu")
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∏–∫–µ—Ç–µ
    status_text = {
        TicketStatus.OPEN: "üÜï –û—Ç–∫—Ä—ã—Ç (–æ–∂–∏–¥–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞)",
        TicketStatus.IN_PROGRESS: "üîÑ –í —Ä–∞–±–æ—Ç–µ",
        TicketStatus.RESOLVED: "‚úÖ –†–µ—à–µ–Ω (–æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è)",
        TicketStatus.CLOSED: "üîí –ó–∞–∫—Ä—ã—Ç"
    }.get(ticket.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å")

    message_text = (
        f"üìù <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n"
    )

    if ticket.moderator:
        message_text += f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: {ticket.moderator.full_name}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if ticket.status == TicketStatus.RESOLVED:
        await message.answer(
            message_text,
            reply_markup=build_rating_keyboard()
        )
        await state.set_state(UserStates.RATING_MODERATOR)
        await state.update_data(active_ticket_id=ticket.id)
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
        await message.answer(
            message_text,
            reply_markup=build_back_keyboard("user:back_to_menu")
        )

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
        messages_query = select(TicketMessage).where(
            TicketMessage.ticket_id == ticket.id
        ).order_by(TicketMessage.sent_at.asc())
        messages_result = await session.execute(messages_query)
        messages = messages_result.scalars().all()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if messages:
            await message.answer("üìú <b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:</b>")

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
            max_messages = 10
            start_idx = max(0, len(messages) - max_messages)

            for msg in messages[start_idx:]:
                sender = "–í—ã" if msg.sender_id == user.id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
                time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

                if msg.message_type == MessageType.SYSTEM:
                    await message.answer(f"üîî <i>{msg.text}</i>")
                elif msg.message_type == MessageType.TEXT:
                    await message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
                elif msg.message_type == MessageType.PHOTO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                    await bot.send_photo(
                        chat_id=message.from_user.id,
                        photo=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.VIDEO:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                    await bot.send_video(
                        chat_id=message.from_user.id,
                        video=msg.file_id,
                        caption=caption
                    )
                elif msg.message_type == MessageType.DOCUMENT:
                    caption = f"<b>{sender}</b> [{time}]:" + (
                        f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ''}" if msg.text else "")
                    await bot.send_document(
                        chat_id=message.from_user.id,
                        document=msg.file_id,
                        caption=caption
                    )

        if ticket.status == TicketStatus.IN_PROGRESS:
            await message.answer(
                "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
            )
            await state.set_state(UserStates.SENDING_MESSAGE)
            await state.update_data(active_ticket_id=ticket.id)
        else:
            await message.answer(
                "<i>–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É.</i>"
            )


@router.message(F.text == "‚úèÔ∏è –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç")
async def reply_new_ticket_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return await command_start(message, session, state)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_ticket_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status.in_([TicketStatus.OPEN, TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    )
    active_ticket_result = await session.execute(active_ticket_query)
    active_ticket = active_ticket_result.scalar_one_or_none()

    if active_ticket:
        # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
        await message.answer(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_ticket.id} "
            f"({TICKET_STATUS_EMOJI[active_ticket.status]} {active_ticket.status.value}). "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è, –ø—Ä–µ–∂–¥–µ —á–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=build_user_main_menu()
        )
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é —Ç–∏–∫–µ—Ç–∞
    await message.answer(
        "‚úèÔ∏è <b>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç –∫ –≤–∞—à–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é.\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–±–ª–µ–º—ã:</i>",
        reply_markup=build_back_keyboard("user:back_to_menu")
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    await state.set_state(UserStates.CREATING_TICKET)

    logger.info(f"User {user_id} accessed create ticket using reply button")


@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤")
async def reply_ticket_history_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        return await command_start(message, session, state)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tickets_query = select(Ticket).where(
        (Ticket.user_id == user.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.created_at.desc())
    tickets_result = await session.execute(tickets_query)
    tickets = tickets_result.scalars().all()

    if not tickets:
        await message.answer(
            "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
            reply_markup=build_back_keyboard("user:back_to_menu")
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "subject": ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã",
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "closed_at": ticket.closed_at.strftime("%d.%m.%Y %H:%M") if ticket.closed_at else "–ù–µ –∑–∞–∫—Ä—ã—Ç",
            "rating": ticket.rating
        }
        for ticket in tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    message_text = "üìã <b>–ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤</b>\n\n"
    for item in page_items:
        stars = RATING_EMOJI.get(int(item["rating"])) if item["rating"] else "–ù–µ—Ç –æ—Ü–µ–Ω–∫–∏"
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n"
            f"üîí –ó–∞–∫—Ä—ã—Ç: {item['closed_at']}\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∞: {stars}\n\n"
        )

    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1} –∏–∑ {paginator.total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    await message.answer(
        message_text,
        reply_markup=build_tickets_list_keyboard(tickets_data, 0)
    )

    await state.set_state(UserStates.VIEWING_TICKET_HISTORY)

    logger.info(f"User {user_id} accessed ticket history using reply button")


@router.message(F.text == "üì® –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã")
async def reply_unassigned_tickets_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_mod_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    active_mod_ticket_result = await session.execute(active_mod_ticket_query)
    active_mod_ticket = active_mod_ticket_result.scalar_one_or_none()

    if active_mod_ticket:
        await message.answer(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_mod_ticket.id}.\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–∫–µ—Ç–æ–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    unassigned_tickets_query = select(Ticket).where(
        (Ticket.status == TicketStatus.OPEN) &
        (Ticket.moderator_id == None)
    ).order_by(Ticket.created_at.asc()).options(selectinload(Ticket.user))
    unassigned_tickets_result = await session.execute(unassigned_tickets_query)
    unassigned_tickets = unassigned_tickets_result.scalars().all()

    if not unassigned_tickets:
        await message.answer(
            "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "subject": ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã",
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "user_name": ticket.user.full_name if ticket.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }
        for ticket in unassigned_tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    message_text = "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
    for item in page_items:
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item['user_name']}\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n\n"
        )

    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1} –∏–∑ {paginator.total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb = InlineKeyboardBuilder()

    for item in page_items:
        kb.add(InlineKeyboardButton(
            text=f"–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç #{item['id']}",
            callback_data=f"mod:take_ticket:{item['id']}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    row = []
    if paginator.total_pages > 1:
        row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="mod:page:1"))

    row.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mod:back_to_menu"))
    kb.row(*row)

    await message.answer(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(ModeratorStates.VIEWING_TICKETS)

    logger.info(f"Moderator {user_id} accessed unassigned tickets using reply button")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def reply_my_stats_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Ç–∏–∫–µ—Ç–∞–º
    closed_tickets_query = select(func.count(Ticket.id), func.avg(Ticket.rating)).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.CLOSED)
    )
    closed_tickets_result = await session.execute(closed_tickets_query)
    closed_count, avg_rating = closed_tickets_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º –≤ —Ä–∞–±–æ—Ç–µ
    in_progress_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    in_progress_result = await session.execute(in_progress_tickets_query)
    in_progress_count = in_progress_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º, –æ–∂–∏–¥–∞—é—â–∏–º –æ—Ü–µ–Ω–∫–∏
    resolved_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.RESOLVED)
    )
    resolved_result = await session.execute(resolved_tickets_query)
    resolved_count = resolved_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ç–∞–º
    all_tickets_query = select(func.count(Ticket.id)).where(
        Ticket.moderator_id == user.id
    )
    all_tickets_result = await session.execute(all_tickets_query)
    all_tickets_count = all_tickets_result.scalar()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating_text = f"{avg_rating:.2f}" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    avg_rating_stars = RATING_EMOJI.get(round(avg_rating)) if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {user.full_name}</b>\n\n"
        f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {all_tickets_count}\n"
        f"<b>–ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {closed_count}\n"
        f"<b>–¢–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ:</b> {in_progress_count}\n"
        f"<b>–†–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏):</b> {resolved_count}\n\n"
        f"<b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating_text} {avg_rating_stars}\n"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    recent_tickets_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.closed_at.desc()).limit(5).options(selectinload(Ticket.user))
    recent_tickets_result = await session.execute(recent_tickets_query)
    recent_tickets = recent_tickets_result.scalars().all()

    if recent_tickets:
        message_text += "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n"
        for ticket in recent_tickets:
            rating_text = RATING_EMOJI.get(int(ticket.rating)) if ticket.rating else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"
            message_text += (
                f"üîπ <b>–¢–∏–∫–µ—Ç #{ticket.id}</b> - {rating_text}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
                f"üìÖ –ó–∞–∫—Ä—ã—Ç: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )

    await message.answer(
        message_text,
        reply_markup=build_back_keyboard("mod:back_to_menu")
    )

    logger.info(f"Moderator {user_id} viewed their stats using reply button")


@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def reply_stats_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_stats_query = select(
        func.count(User.id).filter(User.role == UserRole.USER).label("users_count"),
        func.count(User.id).filter(User.role == UserRole.MODERATOR).label("moderators_count"),
        func.count(User.id).filter(User.role == UserRole.ADMIN).label("admins_count")
    )
    users_stats_result = await session.execute(users_stats_query)
    users_stats = users_stats_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º
    tickets_stats_query = select(
        func.count(Ticket.id).label("total_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.OPEN).label("open_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.IN_PROGRESS).label("in_progress_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.RESOLVED).label("resolved_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.CLOSED).label("closed_tickets"),
        func.avg(Ticket.rating).filter(Ticket.status == TicketStatus.CLOSED).label("avg_rating")
    )
    tickets_stats_result = await session.execute(tickets_stats_query)
    tickets_stats = tickets_stats_result.one()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    message_text = (
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_stats.users_count}\n"
        f"üîë –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {users_stats.moderators_count}\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {users_stats.admins_count}\n\n"

        f"<b>–¢–∏–∫–µ—Ç—ã:</b>\n"
        f"üìä –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {tickets_stats.total_tickets}\n"
        f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {tickets_stats.open_tickets}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {tickets_stats.in_progress_tickets}\n"
        f"‚úÖ –†–µ—à–µ–Ω–Ω—ã—Ö (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏): {tickets_stats.resolved_tickets}\n"
        f"üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö: {tickets_stats.closed_tickets}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {tickets_stats.avg_rating:.2f if tickets_stats.avg_rating else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}/5.0\n\n"
    )

    await message.answer(
        message_text,
        reply_markup=build_back_keyboard("admin:back_to_menu")
    )

    await state.set_state(AdminStates.VIEWING_STATISTICS)

    logger.info(f"Admin {user_id} viewed general statistics using reply button")


@router.message(F.text == "üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏")
async def reply_manage_mods_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    message_text = "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"

    if not moderators:
        message_text += "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        message_text += "<b>–¢–µ–∫—É—â–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n\n"
        for i, mod in enumerate(moderators, 1):
            message_text += f"{i}. {mod.full_name} (ID: {mod.telegram_id})\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin:add_moderator"))

    if moderators:
        kb.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin:remove_moderator"))

    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back_to_menu"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    kb.adjust(1)

    await message.answer(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(AdminStates.MANAGING_MODERATORS)

    logger.info(f"Admin {user_id} accessed moderator management using reply button")


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–∞")
async def reply_search_ticket_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–∞" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –¢–∞–∫ –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ –∫–æ–¥–µ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –±–∞–∑–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–∞</b>\n\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–∞–º–∏.",
        reply_markup=build_admin_main_menu()
    )
    await state.set_state(AdminStates.MAIN_MENU)

    logger.info(f"Admin {user_id} tried to access ticket search using reply button")


@router.message(Command("help"))
async def command_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "ü§ù <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>\n\n"
        "<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        "/menu - –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"

        "<b>–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        "- –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–∫–µ—Ç, –æ–ø–∏—Å–∞–≤ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É\n"
        "- –î–æ–∂–¥–∏—Ç–µ—Å—å, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç\n"
        "- –û–±—â–∞–π—Ç–µ—Å—å —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
        "- –ü–æ—Å–ª–µ —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –æ—Ü–µ–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n\n"

        "<b>–î–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "- –ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ç–∏–∫–µ—Ç—ã –≤ —Ä–∞–±–æ—Ç—É\n"
        "- –û–±—â–∞–π—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞\n"
        "- –û—Ç–º–µ—Ç—å—Ç–µ —Ç–∏–∫–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π, –∫–æ–≥–¥–∞ –ø—Ä–æ–±–ª–µ–º–∞ –±—É–¥–µ—Ç —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞\n\n"

        "<b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        "- –ù–∞–∑–Ω–∞—á–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
        "- –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
    )

    await message.answer(help_text)
    logger.info(f"User {message.from_user.id} requested help")


@router.message(Command("menu"))
async def command_menu(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start
        return await command_start(message, session, state)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
    if user.role == UserRole.ADMIN:
        await message.answer(
            "üëë –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_admin_main_menu()
        )
        await state.set_state(AdminStates.MAIN_MENU)
    elif user.role == UserRole.MODERATOR:
        await message.answer(
            "üîë –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_moderator_main_menu()
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
    else:
        await message.answer(
            "üë§ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=build_user_main_menu()
        )
        await state.set_state(UserStates.MAIN_MENU)

    logger.info(f"User {user_id} opened the menu")


@router.callback_query(F.data.startswith("language:"))
async def process_language_selection(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
    """
    user_id = callback_query.from_user.id
    selected_language = callback_query.data.split(":")[1]

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    db_user = result.scalar_one_or_none()

    if db_user:
        # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db_user.language = selected_language
        await session.commit()

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
        if selected_language == "ru":
            welcome_text = "üá∑üá∫ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"
        elif selected_language == "en":
            welcome_text = "üá¨üáß Language changed to English. Welcome to the support system!"
        elif selected_language == "uk":
            welcome_text = "üá∫üá¶ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É. –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Å–∏—Å—Ç–µ–º–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!"
        else:
            welcome_text = "–Ø–∑—ã–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏!"

        # –°–æ–∑–¥–∞–µ–º Reply Keyboard
        reply_markup = build_main_reply_keyboard(db_user.role)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ –º–µ–Ω—é
        await callback_query.message.edit_text(
            f"{welcome_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        await callback_query.message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=reply_markup
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Inline –º–µ–Ω—é
        await callback_query.message.answer(
            "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=build_user_main_menu()
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        await state.set_state(UserStates.MAIN_MENU)

        logger.info(f"User {user_id} selected {selected_language} language")
    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –ë–î
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /start",
        )
        logger.error(f"User {user_id} not found in database during language selection")