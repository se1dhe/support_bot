import logging
from typing import Union, Dict, List, Any, Optional
from datetime import datetime

from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, update
from sqlalchemy.orm import selectinload

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils.i18n import _
from utils.keyboards import KeyboardFactory
from utils.states import ModeratorStates, UserStates
from utils.paginator import Paginator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "mod:unassigned_tickets")
async def unassigned_tickets_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ unassigned_tickets!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_unassigned_tickets(callback_query, session, state)


async def _process_unassigned_tickets(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            _("error_access_denied", user.language if user else None)
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_mod_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    active_mod_ticket_result = await session.execute(active_mod_ticket_query)
    active_mod_ticket = active_mod_ticket_result.scalar_one_or_none()

    if active_mod_ticket:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_mod_ticket.id}.\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–∫–µ—Ç–æ–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", user.language)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    unassigned_tickets_query = select(Ticket).where(
        (Ticket.status == TicketStatus.OPEN) &
        (Ticket.moderator_id == None)
    ).order_by(Ticket.created_at.asc()).options(selectinload(Ticket.user))
    unassigned_tickets_result = await session.execute(unassigned_tickets_query)
    unassigned_tickets = unassigned_tickets_result.scalars().all()

    if not unassigned_tickets:
        await callback_query.message.edit_text(
            "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", user.language)
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "text": f"–¢–∏–∫–µ—Ç #{ticket.id} - {ticket.user.full_name if ticket.user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}",
            "subject": ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã",
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "user_name": ticket.user.full_name if ticket.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "user_id": ticket.user.id if ticket.user else None
        }
        for ticket in unassigned_tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    message_text = "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
    for item in page_items:
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item['user_name']}\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n\n"
        )

    page_info = paginator.get_page_info(0)
    message_text += _("page_info", user.language,
                      current_page=page_info["current_page"],
                      total_pages=page_info["total_pages"])

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–∏–∫–µ—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    kb_items = []
    for item in page_items:
        kb_items.append({
            "id": f"take:{item['id']}",
            "text": f"–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç #{item['id']}"
        })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.paginated_list(
            kb_items,
            0,
            action_prefix="mod",
            back_callback="mod:back_to_menu",
            language=user.language
        )
    )

    await state.set_state(ModeratorStates.VIEWING_TICKETS)
    await callback_query.answer()

    logger.info(f"Moderator {user_id} viewed unassigned tickets")


@router.callback_query(F.data.startswith("mod:take:"))
async def take_ticket_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ take_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ take_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_take_ticket(callback_query, bot, session, state)


async def _process_take_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            _("error_access_denied", moderator.language if moderator else None)
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_mod_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    active_mod_ticket_result = await session.execute(active_mod_ticket_query)
    active_mod_ticket = active_mod_ticket_result.scalar_one_or_none()

    if active_mod_ticket:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_mod_ticket.id}.\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–∫–µ—Ç–æ–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", moderator.language)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.status == TicketStatus.OPEN)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            _("error_ticket_not_found", moderator.language, ticket_id=ticket_id) + " " +
            "–í–æ–∑–º–æ–∂–Ω–æ, —Ç–∏–∫–µ—Ç —É–∂–µ –±—ã–ª –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", moderator.language)
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    ticket.moderator_id = moderator.id
    ticket.status = TicketStatus.IN_PROGRESS
    ticket.updated_at = datetime.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=MessageType.SYSTEM,
        text=_("moderator_took_ticket", None, moderator_name=moderator.full_name)
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–∫–µ—Ç–µ
    message_text = (
        f"üîÑ <b>–¢–∏–∫–µ—Ç #{ticket.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
        f"üìù –¢–µ–º–∞: {ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    keyboard = KeyboardFactory.ticket_actions(TicketStatus.IN_PROGRESS, ticket.id, moderator.language)

    await callback_query.message.edit_text(
        message_text,
        reply_markup=keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º
    await state.set_state(ModeratorStates.WORKING_WITH_TICKET)
    await state.update_data(active_ticket_id=ticket.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if ticket.messages:
        await callback_query.message.answer(_("message_history", moderator.language))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        max_messages = 20
        start_idx = max(0, len(ticket.messages) - max_messages)

        # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
        if len(ticket.messages) > max_messages:
            await callback_query.message.answer(
                f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(ticket.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
            )

        for msg in ticket.messages[start_idx:]:
            if msg.sender_id == ticket.user_id:
                sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            elif msg.sender_id == moderator.id:
                sender = "–í—ã"
            else:
                sender = "–°–∏—Å—Ç–µ–º–∞"

            time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

            if msg.message_type == MessageType.SYSTEM:
                await callback_query.message.answer(f"üîî <i>{msg.text}</i>")
            elif msg.message_type == MessageType.TEXT:
                await callback_query.message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
            elif msg.message_type == MessageType.PHOTO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                await bot.send_photo(
                    chat_id=callback_query.from_user.id,
                    photo=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.VIDEO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                await bot.send_video(
                    chat_id=callback_query.from_user.id,
                    video=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.DOCUMENT:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ''}" if msg.text else "")
                await bot.send_document(
                    chat_id=callback_query.from_user.id,
                    document=msg.file_id,
                    caption=caption
                )

        await callback_query.message.answer(
            "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
        )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É
    try:
        await bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üîî <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
                 f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Moderator {user_id} took ticket #{ticket.id}")


@router.callback_query(F.data.startswith("mod:resolve_ticket:"))
async def resolve_ticket_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ resolve_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_resolve_ticket(callback_query, session, state)


async def _process_resolve_ticket(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            _("error_access_denied", moderator.language if moderator else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            _("error_ticket_not_found", moderator.language, ticket_id=ticket_id) + " " +
            "–∏–ª–∏ –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", moderator.language)
        )
        await callback_query.answer()
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await callback_query.message.edit_text(
        _("confirm_prompt", moderator.language, action="–æ—Ç–º–µ—Ç–∏—Ç—å —Ç–∏–∫–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π") + "\n\n" +
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.",
        reply_markup=KeyboardFactory.confirmation_keyboard(f"resolve:{ticket.id}", moderator.language)
    )

    await callback_query.answer()


@router.callback_query(F.data.startswith("confirm:resolve:"))
async def confirm_resolve_ticket_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_resolve_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_resolve_ticket!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_confirm_resolve_ticket(callback_query, bot, session, state)


async def _process_confirm_resolve_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession,
                                          state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            _("error_access_denied", moderator.language if moderator else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            _("error_ticket_not_found", moderator.language, ticket_id=ticket_id) + " " +
            "–∏–ª–∏ –æ–Ω –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=KeyboardFactory.back_button("mod:back_to_menu", moderator.language)
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    ticket.status = TicketStatus.RESOLVED
    ticket.updated_at = datetime.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=MessageType.SYSTEM,
        text=_("moderator_resolved_ticket", None, moderator_name=moderator.full_name)
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await callback_query.message.edit_text(
        f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º "
        f"–æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.",
        reply_markup=KeyboardFactory.main_menu(UserRole.MODERATOR, moderator.language)
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ModeratorStates.MAIN_MENU)
    await state.clear()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    try:
        user_language = ticket.user.language if ticket.user else "ru"
        await bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üîî <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π</b>\n\n"
                 f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π.\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç.",
            reply_markup=KeyboardFactory.rating_keyboard(user_language)
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Moderator {user_id} marked ticket #{ticket.id} as resolved")


@router.callback_query(F.data == "mod:my_stats")
async def my_stats_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_stats!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_my_stats(callback_query, session, state)


async def _process_my_stats(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            _("error_access_denied", moderator.language if moderator else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Ç–∏–∫–µ—Ç–∞–º
    closed_tickets_query = select(func.count(Ticket.id), func.avg(Ticket.rating)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.CLOSED)
    )
    closed_tickets_result = await session.execute(closed_tickets_query)
    closed_count, avg_rating = closed_tickets_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º –≤ —Ä–∞–±–æ—Ç–µ
    in_progress_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    in_progress_result = await session.execute(in_progress_tickets_query)
    in_progress_count = in_progress_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º, –æ–∂–∏–¥–∞—é—â–∏–º –æ—Ü–µ–Ω–∫–∏
    resolved_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.RESOLVED)
    )
    resolved_result = await session.execute(resolved_tickets_query)
    resolved_count = resolved_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ç–∞–º
    all_tickets_query = select(func.count(Ticket.id)).where(
        Ticket.moderator_id == moderator.id
    )
    all_tickets_result = await session.execute(all_tickets_query)
    all_tickets_count = all_tickets_result.scalar()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating_text = f"{avg_rating:.2f}" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    avg_rating_stars = "‚≠ê" * round(avg_rating) if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator.full_name}</b>\n\n"
        f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {all_tickets_count}\n"
        f"<b>–ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {closed_count}\n"
        f"<b>–¢–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ:</b> {in_progress_count}\n"
        f"<b>–†–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏):</b> {resolved_count}\n\n"
        f"<b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating_text} {avg_rating_stars}\n"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    recent_tickets_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.closed_at.desc()).limit(5).options(selectinload(Ticket.user))
    recent_tickets_result = await session.execute(recent_tickets_query)
    recent_tickets = recent_tickets_result.scalars().all()

    if recent_tickets:
        message_text += "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n"
        for ticket in recent_tickets:
            rating_stars = "‚≠ê" * int(ticket.rating) if ticket.rating else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"
            message_text += (
                f"üîπ <b>–¢–∏–∫–µ—Ç #{ticket.id}</b> - {rating_stars}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name if ticket.user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}\n"
                f"üìÖ –ó–∞–∫—Ä—ã—Ç: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.back_button("mod:back_to_menu", moderator.language)
    )

    await state.set_state(ModeratorStates.VIEWING_STATISTICS)
    await callback_query.answer()

    logger.info(f"Moderator {user_id} viewed their stats")


@router.message(ModeratorStates.WORKING_WITH_TICKET, F.text | F.photo | F.document | F.video)
async def process_moderator_message_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_moderator_message!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_moderator_message!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    return await _process_moderator_message(message, bot, session, state)


async def _process_moderator_message(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await message.answer(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=KeyboardFactory.main_menu(UserRole.MODERATOR, moderator.language)
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    ticket.updated_at = datetime.now()

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await message.answer(_("moderator_message_sent", moderator.language))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        user_language = ticket.user.language if ticket.user else "ru"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == MessageType.TEXT:
            await bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                     f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                     f"{text}"
            )
        elif message_type == MessageType.PHOTO:
            await bot.send_photo(
                chat_id=ticket.user.telegram_id,
                photo=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.DOCUMENT:
            await bot.send_document(
                chat_id=ticket.user.telegram_id,
                document=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.VIDEO:
            await bot.send_video(
                chat_id=ticket.user.telegram_id,
                video=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
    except Exception as e:
        logger.error(f"Failed to send message to user {ticket.user.telegram_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–ù–æ –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞."
        )

    logger.info(f"Moderator {user_id} sent message to ticket #{ticket.id}")


@router.callback_query(F.data == "mod:back_to_menu")
async def back_to_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_back_to_menu(callback_query, session, state)


async def _process_back_to_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    language = moderator.language if moderator else "ru"

    await callback_query.message.edit_text(
        _("moderator_main_menu", language),
        reply_markup=KeyboardFactory.main_menu(UserRole.MODERATOR, language)
    )

    await state.set_state(ModeratorStates.MAIN_MENU)
    await state.clear()
    await callback_query.answer()

    logger.info(f"Moderator {user_id} returned to main menu")


@router.callback_query(F.data == "mod:user_menu")
async def switch_to_user_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ switch_to_user_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_switch_to_user_menu(callback_query, session, state)


async def _process_switch_to_user_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    language = user.language if user else "ru"

    await callback_query.message.edit_text(
        _("user_main_menu", language),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, language)
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"Moderator {user_id} switched to user menu")


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    dp.include_router(router)


@router.message(F.text == "üìù –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç")
async def mod_active_ticket_button_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç" –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –º–æ–¥–µ—Ä–∞—Ç–æ—Ä
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ mod_active_ticket_button!")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    user_id = message.from_user.id
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await message.answer(_("error_access_denied", user.language if user else None))
        return

    # –ó–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∏–∫–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    active_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    active_ticket_result = await session.execute(active_ticket_query)
    ticket = active_ticket_result.scalar_one_or_none()

    if not ticket:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ. –í—ã –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å —Ç–∏–∫–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö.",
            reply_markup=KeyboardFactory.main_reply_keyboard(UserRole.MODERATOR, user.language)
        )
        return

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
    message_text = (
        f"üîÑ <b>–¢–∏–∫–µ—Ç #{ticket.id} –≤ —Ä–∞–±–æ—Ç–µ</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
        f"üìù –¢–µ–º–∞: {ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
    keyboard = KeyboardFactory.ticket_actions(TicketStatus.IN_PROGRESS, ticket.id, user.language)

    await message.answer(message_text, reply_markup=keyboard)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º
    await state.set_state(ModeratorStates.WORKING_WITH_TICKET)
    await state.update_data(active_ticket_id=ticket.id)

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ kwargs –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot = kwargs.get("bot")
    if not bot:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    if ticket.messages:
        await message.answer(_("message_history", user.language))

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        max_messages = 20
        start_idx = max(0, len(ticket.messages) - max_messages)

        # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
        if len(ticket.messages) > max_messages:
            await message.answer(
                f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(ticket.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>"
            )

        for msg in ticket.messages[start_idx:]:
            if msg.sender_id == ticket.user_id:
                sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            elif msg.sender_id == user.id:
                sender = "–í—ã"
            else:
                sender = "–°–∏—Å—Ç–µ–º–∞"

            time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

            if msg.message_type == MessageType.SYSTEM:
                await message.answer(f"üîî <i>{msg.text}</i>")
            elif msg.message_type == MessageType.TEXT:
                await message.answer(f"<b>{sender}</b> [{time}]:\n{msg.text}")
            elif msg.message_type == MessageType.PHOTO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–§–û–¢–û] ', '')}" if msg.text else "")
                await bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.VIDEO:
                caption = f"<b>{sender}</b> [{time}]:" + (f"\n{msg.text.replace('[–í–ò–î–ï–û] ', '')}" if msg.text else "")
                await bot.send_video(
                    chat_id=message.from_user.id,
                    video=msg.file_id,
                    caption=caption
                )
            elif msg.message_type == MessageType.DOCUMENT:
                caption = f"<b>{sender}</b> [{time}]:" + (
                    f"\n{msg.text.replace('[–î–û–ö–£–ú–ï–ù–¢: ', '').split(']')[1] if ']' in msg.text else ''}" if msg.text else "")
                await bot.send_document(
                    chat_id=message.from_user.id,
                    document=msg.file_id,
                    caption=caption
                )

        await message.answer(
            "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
        )

    logger.info(f"Moderator {user_id} viewed active ticket #{ticket.id}")


@router.message(F.text == "üì® –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã")
async def unassigned_tickets_button_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã" –Ω–∞ Reply Keyboard
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ unassigned_tickets_button!")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é
        from database import async_session_factory
        if async_session_factory:
            async with async_session_factory() as temp_session:
                return await _process_unassigned_tickets_button(message, temp_session, state)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    else:
        return await _process_unassigned_tickets_button(message, session, state)


async def _process_unassigned_tickets_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await message.answer(
            _("error_access_denied", user.language if user else None)
        )
        return

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ Inline –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    class FakeCallbackQuery:
        def __init__(self, user_id, message_obj):
            self.from_user = type('obj', (object,), {'id': user_id})
            self.message = message_obj
            self.data = "mod:unassigned_tickets"

        async def answer(self, *args, **kwargs):
            pass

    fake_callback = FakeCallbackQuery(user_id, message)

    # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_message = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    fake_callback.message = result_message

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Inline –∫–Ω–æ–ø–∫–∏ "–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"
    await unassigned_tickets_wrapper(fake_callback, state, session=session)

    logger.info(f"Moderator {user_id} used Reply button 'Unassigned Tickets'")


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def my_stats_button_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –Ω–∞ Reply Keyboard
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ my_stats_button!")

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –≤—Ä—É—á–Ω—É—é
        from database import async_session_factory
        if async_session_factory:
            async with async_session_factory() as temp_session:
                return await _process_my_stats_button(message, temp_session, state)
        else:
            # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    else:
        return await _process_my_stats_button(message, session, state)


async def _process_my_stats_button(message: Message, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" –Ω–∞ Reply Keyboard
    """
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await message.answer(
            _("error_access_denied", user.language if user else None)
        )
        return

    # –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ Inline –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    class FakeCallbackQuery:
        def __init__(self, user_id, message_obj):
            self.from_user = type('obj', (object,), {'id': user_id})
            self.message = message_obj
            self.data = "mod:my_stats"

        async def answer(self, *args, **kwargs):
            pass

    fake_callback = FakeCallbackQuery(user_id, message)

    # –ó–¥–µ—Å—å —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    result_message = await message.answer("–ó–∞–≥—Ä—É–∑–∫–∞...")
    fake_callback.message = result_message

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è Inline –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    await my_stats_wrapper(fake_callback, state, session=session)

    logger.info(f"Moderator {user_id} used Reply button 'My Statistics'")