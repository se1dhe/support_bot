import logging
from typing import Union, Dict, List, Any
from datetime import datetime

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from sqlalchemy.orm import selectinload
from sqlalchemy.future import select

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils import (
    build_moderator_main_menu,
    build_user_main_menu,
    build_tickets_list_keyboard,
    build_back_keyboard,
    build_confirm_keyboard,
    ModeratorStates,
    UserStates,
    Paginator,
    TICKET_STATUS_EMOJI,
    RATING_EMOJI
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "mod:unassigned_tickets")
async def unassigned_tickets(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    user = result.scalar_one_or_none()

    if not user or user.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_mod_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == user.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    active_mod_ticket_result = await session.execute(active_mod_ticket_query)
    active_mod_ticket = active_mod_ticket_result.scalar_one_or_none()

    if active_mod_ticket:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_mod_ticket.id}.\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–∫–µ—Ç–æ–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    unassigned_tickets_query = select(Ticket).where(
        (Ticket.status == TicketStatus.OPEN) &
        (Ticket.moderator_id == None)
    ).order_by(Ticket.created_at.asc()).options(selectinload(Ticket.user))
    unassigned_tickets_result = await session.execute(unassigned_tickets_query)
    unassigned_tickets = unassigned_tickets_result.scalars().all()

    if not unassigned_tickets:
        await callback_query.message.edit_text(
            "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–∫–µ—Ç—ã –≤ state –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    tickets_data = [
        {
            "id": ticket.id,
            "subject": ticket.subject or "–ë–µ–∑ —Ç–µ–º—ã",
            "created_at": ticket.created_at.strftime("%d.%m.%Y %H:%M"),
            "user_name": ticket.user.full_name if ticket.user else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        }
        for ticket in unassigned_tickets
    ]
    await state.update_data(tickets=tickets_data, page=0)

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)
    page_items = paginator.get_page(0)

    message_text = "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
    for item in page_items:
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item['user_name']}\n"
            f"üìù {item['subject']}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item['created_at']}\n\n"
        )

    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {1} –∏–∑ {paginator.total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb = InlineKeyboardBuilder()

    for item in page_items:
        kb.add(InlineKeyboardButton(
            text=f"–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç #{item['id']}",
            callback_data=f"mod:take_ticket:{item['id']}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    row = []
    if paginator.total_pages > 1:
        row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data="mod:page:1"))

    row.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mod:back_to_menu"))
    kb.row(*row)

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(ModeratorStates.VIEWING_TICKETS)
    await callback_query.answer()


@router.callback_query(F.data.startswith("mod:take_ticket:"))
async def take_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—è—Ç–∏—è —Ç–∏–∫–µ—Ç–∞ –≤ —Ä–∞–±–æ—Ç—É
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç
    active_mod_ticket_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    active_mod_ticket_result = await session.execute(active_mod_ticket_query)
    active_mod_ticket = active_mod_ticket_result.scalar_one_or_none()

    if active_mod_ticket:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç #{active_mod_ticket.id}.\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–¥–Ω–∏–º —Ç–∏–∫–µ—Ç–æ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. "
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —Å —Ç–µ–∫—É—â–∏–º —Ç–∏–∫–µ—Ç–æ–º, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–π.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.status == TicketStatus.OPEN)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    ticket.moderator_id = moderator.id
    ticket.status = TicketStatus.IN_PROGRESS
    ticket.updated_at = func.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç–∏–∫–µ—Ç–∞
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=MessageType.SYSTEM,
        text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –ø—Ä–∏–Ω—è–ª —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É"
    )
    session.add(system_message)

    await session.commit()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç–∏–∫–µ—Ç–∞
    message_text = (
        f"üîÑ <b>–¢–∏–∫–µ—Ç #{ticket.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
        f"üìù –¢–µ–º–∞: {ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n\n"
    )

    for msg in ticket.messages:
        sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" if msg.sender_id == ticket.user_id else "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
        time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

        if msg.message_type == MessageType.SYSTEM:
            message_text += f"üîî <i>{msg.text}</i>\n\n"
        else:
            message_text += f"<b>{sender}</b> [{time}]:\n{msg.text}\n\n"

    message_text += (
        "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π", callback_data=f"mod:resolve_ticket:{ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"mod:reassign_ticket:{ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="mod:back_to_menu"))

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–∫–µ—Ç–æ–º
    await state.set_state(ModeratorStates.WORKING_WITH_TICKET)
    await state.update_data(active_ticket_id=ticket.id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ç–æ–º, —á—Ç–æ –µ–≥–æ —Ç–∏–∫–µ—Ç –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É
    try:
        await bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üîî <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É</b>\n\n"
                 f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º.\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞.",
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Moderator {user_id} took ticket #{ticket.id}")


@router.callback_query(F.data.startswith("mod:resolve_ticket:"))
async def resolve_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await callback_query.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å —Ç–∏–∫–µ—Ç #{ticket.id} –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π?\n\n"
        f"–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.",
        reply_markup=build_confirm_keyboard(f"resolve:{ticket.id}")
    )

    await callback_query.answer()


@router.callback_query(F.data.startswith("confirm:resolve:"))
async def confirm_resolve_ticket(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–º–µ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–∞ –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω–æ–≥–æ
    """
    user_id = callback_query.from_user.id
    ticket_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    ticket.status = TicketStatus.RESOLVED
    ticket.updated_at = func.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=MessageType.SYSTEM,
        text=f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –æ—Ç–º–µ—Ç–∏–ª —Ç–∏–∫–µ—Ç –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π"
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await callback_query.message.edit_text(
        f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º "
        f"–æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –∑–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç.",
        reply_markup=build_moderator_main_menu()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ModeratorStates.MAIN_MENU)
    await state.clear_data()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–µ—à–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    try:
        await bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üîî <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π</b>\n\n"
                 f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –æ—Ç–º–µ—Ç–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫–∞–∫ —Ä–µ—à–µ–Ω–Ω—ã–π.\n"
                 f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∏ –∑–∞–∫—Ä–æ–π—Ç–µ —Ç–∏–∫–µ—Ç.",
            reply_markup=build_rating_keyboard()
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Moderator {user_id} marked ticket #{ticket.id} as resolved")


@router.callback_query(F.data.startswith("mod:reassign_ticket"))
async def reassign_ticket_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    """
    user_id = callback_query.from_user.id

    # –ï—Å–ª–∏ –≤ callback_data –µ—Å—Ç—å id —Ç–∏–∫–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if ":" in callback_query.data:
        ticket_id = int(callback_query.data.split(":")[2])
        await state.update_data(active_ticket_id=ticket_id)
    else:
        # –ò–Ω–∞—á–µ –±–µ—Ä–µ–º id –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        state_data = await state.get_data()
        ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await callback_query.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–∫–µ—Ç –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    free_moderators_query = select(User).where(
        (User.role == UserRole.MODERATOR) &
        (User.id != moderator.id)
    )
    free_moderators_result = await session.execute(free_moderators_query)
    free_moderators = free_moderators_result.scalars().all()

    # –§–∏–ª—å—Ç—Ä—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    busy_moderators_query = select(User.id).where(
        (User.role == UserRole.MODERATOR) &
        (User.id.in_([mod.id for mod in free_moderators])) &
        (User.id == Ticket.moderator_id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    busy_moderators_result = await session.execute(busy_moderators_query)
    busy_moderators_ids = [row[0] for row in busy_moderators_result.all()]

    available_moderators = [mod for mod in free_moderators if mod.id not in busy_moderators_ids]

    if not available_moderators:
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞.\n\n"
            f"–í—Å–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –ª–∏–±–æ –∑–∞–Ω—è—Ç—ã, –ª–∏–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.",
            reply_markup=build_back_keyboard("mod:back_to_ticket")
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    kb = InlineKeyboardBuilder()
    for mod in available_moderators:
        kb.add(InlineKeyboardButton(
            text=f"{mod.full_name}",
            callback_data=f"mod:assign_to:{mod.id}:{ticket.id}"
        ))

    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mod:back_to_ticket"))

    await callback_query.message.edit_text(
        f"üîÑ <b>–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ #{ticket.id}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç:",
        reply_markup=kb.as_markup()
    )

    await state.set_state(ModeratorStates.REASSIGNING_TICKET)
    await callback_query.answer()


@router.callback_query(F.data.startswith("mod:assign_to:"))
async def assign_to_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞ –¥—Ä—É–≥–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    """
    user_id = callback_query.from_user.id
    parts = callback_query.data.split(":")
    new_moderator_id = int(parts[2])
    ticket_id = int(parts[3])

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    current_moderator = result.scalar_one_or_none()

    if not current_moderator or current_moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    new_moderator_query = select(User).where(User.id == new_moderator_id)
    new_moderator_result = await session.execute(new_moderator_query)
    new_moderator = new_moderator_result.scalar_one_or_none()

    if not new_moderator or new_moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–í—ã–±—Ä–∞–Ω–Ω—ã–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == current_moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç: –º–µ–Ω—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    ticket.moderator_id = new_moderator.id
    ticket.updated_at = func.now()

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    system_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=current_moderator.id,
        message_type=MessageType.SYSTEM,
        text=f"–¢–∏–∫–µ—Ç –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω —Å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {current_moderator.full_name} –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {new_moderator.full_name}"
    )
    session.add(system_message)

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await callback_query.message.edit_text(
        f"‚úÖ <b>–¢–∏–∫–µ—Ç #{ticket.id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
        f"–¢–∏–∫–µ—Ç –±—ã–ª –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {new_moderator.full_name}.",
        reply_markup=build_moderator_main_menu()
    )

    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(ModeratorStates.MAIN_MENU)
    await state.clear_data()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç–∏–∫–µ—Ç–∞
        message_text = (
            f"üîÑ <b>–í–∞–º –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
            f"üìù –¢–µ–º–∞: {ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n\n"
        )

        for msg in ticket.messages:
            if msg.sender_id == ticket.user_id:
                sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            elif msg.sender_id == current_moderator.id:
                sender = f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {current_moderator.full_name}"
            else:
                sender = "–°–∏—Å—Ç–µ–º–∞"

            time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

            if msg.message_type == MessageType.SYSTEM:
                message_text += f"üîî <i>{msg.text}</i>\n\n"
            else:
                message_text += f"<b>{sender}</b> [{time}]:\n{msg.text}\n\n"

        message_text += (
            "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
        )

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π", callback_data=f"mod:resolve_ticket:{ticket.id}"))
        kb.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"mod:reassign_ticket:{ticket.id}"))
        kb.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="mod:back_to_menu"))

        await bot.send_message(
            chat_id=new_moderator.telegram_id,
            text=message_text,
            reply_markup=kb.as_markup()
        )
    except Exception as e:
        logger.error(f"Failed to send notification to new moderator {new_moderator.telegram_id}: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ —Ç–∏–∫–µ—Ç–∞
    try:
        await bot.send_message(
            chat_id=ticket.user.telegram_id,
            text=f"üîî <b>–í–∞—à —Ç–∏–∫–µ—Ç #{ticket.id} –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω</b>\n\n"
                 f"–í–∞—à –∑–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É {new_moderator.full_name}.\n"
                 f"–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω–æ."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Moderator {user_id} reassigned ticket #{ticket.id} to moderator {new_moderator_id}")


@router.callback_query(F.data == "mod:my_stats")
async def my_stats(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫—Ä—ã—Ç—ã–º —Ç–∏–∫–µ—Ç–∞–º
    closed_tickets_query = select(func.count(Ticket.id), func.avg(Ticket.rating)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.CLOSED)
    )
    closed_tickets_result = await session.execute(closed_tickets_query)
    closed_count, avg_rating = closed_tickets_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º –≤ —Ä–∞–±–æ—Ç–µ
    in_progress_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    )
    in_progress_result = await session.execute(in_progress_tickets_query)
    in_progress_count = in_progress_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ—à–µ–Ω–Ω—ã–º —Ç–∏–∫–µ—Ç–∞–º, –æ–∂–∏–¥–∞—é—â–∏–º –æ—Ü–µ–Ω–∫–∏
    resolved_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.RESOLVED)
    )
    resolved_result = await session.execute(resolved_tickets_query)
    resolved_count = resolved_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º —Ç–∏–∫–µ—Ç–∞–º
    all_tickets_query = select(func.count(Ticket.id)).where(
        Ticket.moderator_id == moderator.id
    )
    all_tickets_result = await session.execute(all_tickets_query)
    all_tickets_count = all_tickets_result.scalar()

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    avg_rating_text = f"{avg_rating:.2f}" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
    avg_rating_stars = RATING_EMOJI.get(round(avg_rating)) if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator.full_name}</b>\n\n"
        f"<b>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {all_tickets_count}\n"
        f"<b>–ó–∞–∫—Ä—ã—Ç–æ —Ç–∏–∫–µ—Ç–æ–≤:</b> {closed_count}\n"
        f"<b>–¢–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ:</b> {in_progress_count}\n"
        f"<b>–†–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤ (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏):</b> {resolved_count}\n\n"
        f"<b>–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥:</b> {avg_rating_text} {avg_rating_stars}\n"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    recent_tickets_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.CLOSED)
    ).order_by(Ticket.closed_at.desc()).limit(5).options(selectinload(Ticket.user))
    recent_tickets_result = await session.execute(recent_tickets_query)
    recent_tickets = recent_tickets_result.scalars().all()

    if recent_tickets:
        message_text += "\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–∏–∫–µ—Ç—ã:</b>\n"
        for ticket in recent_tickets:
            rating_text = RATING_EMOJI.get(int(ticket.rating)) if ticket.rating else "–ë–µ–∑ –æ—Ü–µ–Ω–∫–∏"
            message_text += (
                f"üîπ <b>–¢–∏–∫–µ—Ç #{ticket.id}</b> - {rating_text}\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
                f"üìÖ –ó–∞–∫—Ä—ã—Ç: {ticket.closed_at.strftime('%d.%m.%Y %H:%M')}\n\n"
            )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=build_back_keyboard("mod:back_to_menu")
    )

    await callback_query.answer()

    logger.info(f"Moderator {user_id} viewed their stats")


@router.message(ModeratorStates.WORKING_WITH_TICKET, F.text | F.photo | F.document | F.video)
async def process_moderator_message(message: Message, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —Ç–∏–∫–µ—Ç–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: /menu"
        )
        return

    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await message.answer(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_moderator_main_menu()
        )
        await state.set_state(ModeratorStates.MAIN_MENU)
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    message_type = MessageType.TEXT
    file_id = None
    text = message.text or ""

    if message.photo:
        message_type = MessageType.PHOTO
        file_id = message.photo[-1].file_id
        caption = message.caption or ""
        text = f"[–§–û–¢–û] {caption}"
    elif message.document:
        message_type = MessageType.DOCUMENT
        file_id = message.document.file_id
        caption = message.caption or ""
        text = f"[–î–û–ö–£–ú–ï–ù–¢: {message.document.file_name}] {caption}"
    elif message.video:
        message_type = MessageType.VIDEO
        file_id = message.video.file_id
        caption = message.caption or ""
        text = f"[–í–ò–î–ï–û] {caption}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    ticket_message = TicketMessage(
        ticket_id=ticket.id,
        sender_id=moderator.id,
        message_type=message_type,
        text=text,
        file_id=file_id
    )
    session.add(ticket_message)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞
    ticket.updated_at = func.now()

    await session.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message_type == MessageType.TEXT:
            await bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                     f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                     f"{text}"
            )
        elif message_type == MessageType.PHOTO:
            await bot.send_photo(
                chat_id=ticket.user.telegram_id,
                photo=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.DOCUMENT:
            await bot.send_document(
                chat_id=ticket.user.telegram_id,
                document=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
        elif message_type == MessageType.VIDEO:
            await bot.send_video(
                chat_id=ticket.user.telegram_id,
                video=file_id,
                caption=f"üì® <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #{ticket.id}</b>\n\n"
                        f"–û—Ç: –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name}\n\n"
                        f"{message.caption or ''}"
            )
    except Exception as e:
        logger.error(f"Failed to send message to user {ticket.user.telegram_id}: {e}")
        await message.answer(
            "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
            "–ù–æ –æ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Ç–∏–∫–µ—Ç–∞."
        )

    logger.info(f"Moderator {user_id} sent message to ticket #{ticket.id}")


@router.callback_query(F.data == "mod:back_to_menu")
async def back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    await callback_query.message.edit_text(
        "üîë <b>–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_moderator_main_menu()
    )

    await state.set_state(ModeratorStates.MAIN_MENU)
    await state.clear_data()
    await callback_query.answer()


@router.callback_query(F.data == "mod:back_to_ticket")
async def back_to_ticket(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∞–∫—Ç–∏–≤–Ω–æ–º—É —Ç–∏–∫–µ—Ç—É
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    ticket_id = state_data.get("active_ticket_id")

    if not ticket_id:
        await callback_query.message.edit_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    moderator = result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–∫–µ—Ç –∏–∑ –ë–î
    ticket_query = select(Ticket).where(
        (Ticket.id == ticket_id) &
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status == TicketStatus.IN_PROGRESS)
    ).options(selectinload(Ticket.user), selectinload(Ticket.messages))
    ticket_result = await session.execute(ticket_query)
    ticket = ticket_result.scalar_one_or_none()

    if not ticket:
        await callback_query.message.edit_text(
            f"–¢–∏–∫–µ—Ç #{ticket_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ —É –≤–∞—Å.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç–∏–∫–µ—Ç–∞
    message_text = (
        f"üîÑ <b>–¢–∏–∫–µ—Ç #{ticket.id}</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {ticket.user.full_name}\n"
        f"üìù –¢–µ–º–∞: {ticket.subject or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
        f"üìÖ –°–æ–∑–¥–∞–Ω: {ticket.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        f"<b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:</b>\n\n"
    )

    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    max_messages = 10
    start_idx = max(0, len(ticket.messages) - max_messages)

    for i, msg in enumerate(ticket.messages[start_idx:], start=start_idx + 1):
        if msg.sender_id == ticket.user_id:
            sender = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        elif msg.sender_id == moderator.id:
            sender = "–í—ã"
        else:
            sender = "–°–∏—Å—Ç–µ–º–∞"

        time = msg.sent_at.strftime("%d.%m.%Y %H:%M")

        if msg.message_type == MessageType.SYSTEM:
            message_text += f"üîî <i>{msg.text}</i>\n\n"
        else:
            message_text += f"<b>{sender}</b> [{time}]:\n{msg.text}\n\n"

    # –ï—Å–ª–∏ –≤ —Ç–∏–∫–µ—Ç–µ –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–∏
    if len(ticket.messages) > max_messages:
        message_text += f"<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {max_messages} –∏–∑ {len(ticket.messages)} —Å–æ–æ–±—â–µ–Ω–∏–π.</i>\n\n"

    message_text += (
        "<i>–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —ç—Ç–æ—Ç —á–∞—Ç.</i>"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π", callback_data=f"mod:resolve_ticket:{ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å", callback_data=f"mod:reassign_ticket:{ticket.id}"))
    kb.add(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="mod:back_to_menu"))

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(ModeratorStates.WORKING_WITH_TICKET)
    await callback_query.answer()


@router.callback_query(F.data == "mod:user_menu")
async def switch_to_user_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback_query.message.edit_text(
        "üë§ <b>–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_user_main_menu()
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()


@router.callback_query(F.data.startswith("mod:page:"))
async def paginate_tickets(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤
    """
    user_id = callback_query.from_user.id
    new_page = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    tickets_data = state_data.get("tickets", [])

    if not tickets_data:
        await callback_query.message.edit_text(
            "–î–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ç–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.",
            reply_markup=build_back_keyboard("mod:back_to_menu")
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤
    paginator = Paginator(tickets_data, page_size=5)

    if new_page < 0 or new_page >= paginator.total_pages:
        await callback_query.answer("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return

    page_items = paginator.get_page(new_page)

    message_text = "üì® <b>–ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã</b>\n\n"
    for item in page_items:
        message_text += (
            f"üîπ <b>–¢–∏–∫–µ—Ç #{item['id']}</b>\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {item.get('user_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
            f"üìù {item.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')}\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {item.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        )

    message_text += f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {new_page + 1} –∏–∑ {paginator.total_pages}"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
    kb = InlineKeyboardBuilder()

    for item in page_items:
        kb.add(InlineKeyboardButton(
            text=f"–ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç #{item['id']}",
            callback_data=f"mod:take_ticket:{item['id']}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    row = []
    if paginator.has_prev(new_page):
        row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"mod:page:{new_page - 1}"))

    row.append(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="mod:back_to_menu"))

    if paginator.has_next(new_page):
        row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"mod:page:{new_page + 1}"))

    kb.row(*row)

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(page=new_page)
    await callback_query.answer()