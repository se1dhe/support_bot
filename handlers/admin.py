import logging
from typing import Union, Dict, List, Any, Optional
from datetime import datetime, timedelta

from aiogram import Router, F, Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc, update
from sqlalchemy.orm import selectinload

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils.i18n import _
from utils.keyboards import KeyboardFactory
from utils.states import AdminStates, ModeratorStates, UserStates

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "admin:stats")
async def admin_stats_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ admin_stats!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_admin_stats(callback_query, session, state)


async def _process_admin_stats(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    users_query = select(User.role, func.count(User.id).label("count")).group_by(User.role)
    users_result = await session.execute(users_query)
    users_counts = {role: count for role, count in users_result}

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–æ–ª—è–º
    users_count = users_counts.get(UserRole.USER, 0)
    moderators_count = users_counts.get(UserRole.MODERATOR, 0)
    admins_count = users_counts.get(UserRole.ADMIN, 0)

    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
    total_tickets_query = select(func.count(Ticket.id))
    total_tickets_result = await session.execute(total_tickets_query)
    total_tickets = total_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    open_tickets_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.OPEN)
    open_tickets_result = await session.execute(open_tickets_query)
    open_tickets = open_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ
    in_progress_tickets_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.IN_PROGRESS)
    in_progress_tickets_result = await session.execute(in_progress_tickets_query)
    in_progress_tickets = in_progress_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    resolved_tickets_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.RESOLVED)
    resolved_tickets_result = await session.execute(resolved_tickets_query)
    resolved_tickets = resolved_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    closed_tickets_query = select(func.count(Ticket.id)).where(Ticket.status == TicketStatus.CLOSED)
    closed_tickets_result = await session.execute(closed_tickets_query)
    closed_tickets = closed_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤
    avg_rating_query = select(func.avg(Ticket.rating)).where(Ticket.status == TicketStatus.CLOSED)
    avg_rating_result = await session.execute(avg_rating_query)
    avg_rating = avg_rating_result.scalar()

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏
    if avg_rating is not None:
        avg_rating_text = f"{avg_rating:.2f}/5.0"
    else:
        avg_rating_text = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = datetime.now() - timedelta(days=7)
    recent_tickets_query = select(func.count(Ticket.id)).where(Ticket.created_at >= week_ago)
    recent_tickets_result = await session.execute(recent_tickets_query)
    recent_tickets_count = recent_tickets_result.scalar() or 0

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    moderators_query = select(
        User,
        func.count(Ticket.id).label("closed_count"),
        func.avg(Ticket.rating).label("avg_rating")
    ).where(
        User.role == UserRole.MODERATOR
    ).outerjoin(
        Ticket, (Ticket.moderator_id == User.id) & (Ticket.status == TicketStatus.CLOSED)
    ).group_by(
        User.id
    ).order_by(
        desc("closed_count")
    ).limit(5)

    moderators_result = await session.execute(moderators_query)
    top_moderators = moderators_result.all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n"
        f"üîë –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {moderators_count}\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {admins_count}\n\n"

        f"<b>–¢–∏–∫–µ—Ç—ã:</b>\n"
        f"üìä –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {total_tickets}\n"
        f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tickets}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {in_progress_tickets}\n"
        f"‚úÖ –†–µ—à–µ–Ω–Ω—ã—Ö (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏): {resolved_tickets}\n"
        f"üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö: {closed_tickets}\n"
        f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {recent_tickets_count}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {avg_rating_text}\n\n"
    )

    if top_moderators:
        message_text += "<b>–¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        for i, (moderator, closed_count, avg_rating) in enumerate(top_moderators, 1):
            # –ó–¥–µ—Å—å —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            if avg_rating is not None:
                avg_rating_text = f"{avg_rating:.2f}/5.0"
            else:
                avg_rating_text = "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"

            message_text += (
                f"{i}. {moderator.full_name} - {closed_count} —Ç–∏–∫–µ—Ç–æ–≤, "
                f"—Ä–µ–π—Ç–∏–Ω–≥: {avg_rating_text}\n"
            )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.back_button("admin:back_to_menu", admin.language)
    )

    await state.set_state(AdminStates.VIEWING_STATISTICS)
    await callback_query.answer()

    logger.info(f"Admin {user_id} viewed general statistics")


@router.callback_query(F.data == "admin:manage_mods")
async def manage_moderators_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ manage_moderators!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_manage_moderators(callback_query, session, state)


async def _process_manage_moderators(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    message_text = "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"

    if not moderators:
        message_text += "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        message_text += "<b>–¢–µ–∫—É—â–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n\n"
        for i, mod in enumerate(moderators, 1):
            message_text += f"{i}. {mod.full_name} (ID: {mod.telegram_id})\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb_items = [
        {"id": "add_moderator", "text": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"}
    ]

    if moderators:
        kb_items.append({"id": "remove_moderator", "text": "‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"})

    kb_items.append({"id": "back_to_menu", "text": "üîô –ù–∞–∑–∞–¥"})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.paginated_list(
            kb_items,
            0,
            action_prefix="admin",
            back_callback="admin:back_to_menu",
            language=admin.language
        )
    )

    await state.set_state(AdminStates.MANAGING_MODERATORS)
    await callback_query.answer()

    logger.info(f"Admin {user_id} accessed moderator management")


@router.callback_query(F.data == "admin:add_moderator")
async def add_moderator_start_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ add_moderator_start!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_add_moderator_start(callback_query, session, state)


async def _process_add_moderator_start(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    await callback_query.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.</i>",
        reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
    )

    await state.set_state(AdminStates.ADDING_MODERATOR)
    await callback_query.answer()

    logger.info(f"Admin {user_id} started adding a moderator")


@router.message(AdminStates.ADDING_MODERATOR, F.text)
async def process_add_moderator_wrapper(message: Message, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_add_moderator!")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return

    return await _process_add_moderator(message, session, state)


async def _process_add_moderator(message: Message, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await message.answer(_("error_access_denied", admin.language if admin else None))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —á–∏—Å–ª–æ
    try:
        new_moderator_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_query = select(User).where(User.telegram_id == new_moderator_id)
    user_result = await session.execute(user_query)
    user = user_result.scalar_one_or_none()

    if not user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start).",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        return

    if user.role == UserRole.ADMIN:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        return

    if user.role == UserRole.MODERATOR:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    await message.answer(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} "
        f"(ID: {user.telegram_id}) –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=KeyboardFactory.confirmation_keyboard(f"add_mod:{new_moderator_id}", admin.language)
    )


@router.callback_query(F.data.startswith("confirm:add_mod:"))
async def confirm_add_moderator_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_add_moderator!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_add_moderator!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_confirm_add_moderator(callback_query, bot, session, state)


async def _process_confirm_add_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession,
                                         state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = callback_query.from_user.id
    new_moderator_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_query = select(User).where(User.telegram_id == new_moderator_id)
    user_result = await session.execute(user_query)
    user = user_result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        await callback_query.answer()
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    user.role = UserRole.MODERATOR
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (ID: {user.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                 f"–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                 f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to new moderator {user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} added new moderator {new_moderator_id}")


@router.callback_query(F.data == "admin:remove_moderator")
async def remove_moderator_start_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ remove_moderator_start!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_remove_moderator_start(callback_query, session, state)


async def _process_remove_moderator_start(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == user_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    if not moderators:
        await callback_query.message.edit_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    message_text = "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    mod_items = []
    for mod in moderators:
        mod_items.append({
            "id": f"confirm_remove_mod:{mod.telegram_id}",
            "text": f"{mod.full_name} (ID: {mod.telegram_id})"
        })

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    mod_items.append({
        "id": "back_to_manage_mods",
        "text": "üîô –ù–∞–∑–∞–¥"
    })

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback_query.message.edit_text(
        message_text,
        reply_markup=KeyboardFactory.paginated_list(
            mod_items,
            0,
            action_prefix="admin",
            back_callback="admin:back_to_manage_mods",
            language=admin.language
        )
    )

    await state.set_state(AdminStates.REMOVING_MODERATOR)
    await callback_query.answer()

    logger.info(f"Admin {user_id} started removing a moderator")


@router.callback_query(F.data.startswith("admin:confirm_remove_mod:"))
async def confirm_remove_moderator_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ confirm_remove_moderator!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_confirm_remove_moderator(callback_query, session, state)


async def _process_confirm_remove_moderator(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = callback_query.from_user.id
    moderator_id = int(callback_query.data.split(":")[3])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    mod_query = select(User).where(User.telegram_id == moderator_id)
    mod_result = await session.execute(mod_query)
    moderator = mod_result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status.in_([TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    )
    active_tickets_result = await session.execute(active_tickets_query)
    active_tickets_count = active_tickets_result.scalar()

    if active_tickets_count > 0:
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –∏–º–µ–µ—Ç {active_tickets_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n\n"
            f"–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞?",
            reply_markup=KeyboardFactory.confirmation_keyboard(f"force_remove_mod:{moderator_id}", admin.language)
        )
        await callback_query.answer()
        return

    # –†–∞–∑–∂–∞–ª—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    moderator.role = UserRole.USER
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} (ID: {moderator.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
        reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await callback_query.send_message(
            chat_id=moderator.telegram_id,
            text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                 f"–í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to former moderator {moderator.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} removed moderator {moderator_id}")


@router.callback_query(F.data.startswith("confirm:force_remove_mod:"))
async def force_remove_moderator_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ force_remove_moderator!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    bot = kwargs.get("bot")
    if not bot:
        logger.error("Bot –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ force_remove_moderator!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_force_remove_moderator(callback_query, bot, session, state)


async def _process_force_remove_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession,
                                          state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏
    """
    admin_id = callback_query.from_user.id
    moderator_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            _("error_access_denied", admin.language if admin else None)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    mod_query = select(User).where(User.telegram_id == moderator_id)
    mod_result = await session.execute(mod_query)
    moderator = mod_result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    active_tickets_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status.in_([TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    ).options(selectinload(Ticket.user))
    active_tickets_result = await session.execute(active_tickets_query)
    active_tickets = active_tickets_result.scalars().all()

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–∏–∫–µ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    for ticket in active_tickets:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
        ticket.status = TicketStatus.OPEN
        ticket.moderator_id = None

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        system_message = TicketMessage(
            ticket_id=ticket.id,
            sender_id=admin.id,
            message_type=MessageType.SYSTEM,
            text=f"–¢–∏–∫–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator.full_name}"
        )
        session.add(system_message)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.id}</b>\n\n"
                     f"–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n"
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É."
            )
        except Exception as e:
            logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    # –†–∞–∑–∂–∞–ª—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    moderator.role = UserRole.USER
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} (ID: {moderator.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
        f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã ({len(active_tickets)}) –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.",
        reply_markup=KeyboardFactory.back_button("admin:back_to_manage_mods", admin.language)
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=moderator.telegram_id,
            text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                 f"–í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                 f"–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to former moderator {moderator.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} force removed moderator {moderator_id} with active tickets")


@router.callback_query(F.data == "admin:back_to_menu")
async def back_to_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_back_to_menu(callback_query, session, state)


async def _process_back_to_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    language = admin.language if admin else "ru"

    await callback_query.message.edit_text(
        _("admin_main_menu", language),
        reply_markup=KeyboardFactory.main_menu(UserRole.ADMIN, language)
    )

    await state.set_state(AdminStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"Admin {user_id} returned to main menu")


@router.callback_query(F.data == "admin:back_to_manage_mods")
async def back_to_manage_mods_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ back_to_manage_mods!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_manage_moderators(callback_query, session, state)


@router.callback_query(F.data == "admin:mod_menu")
async def switch_to_mod_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ switch_to_mod_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_switch_to_mod_menu(callback_query, session, state)


async def _process_switch_to_mod_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    language = admin.language if admin else "ru"

    await callback_query.message.edit_text(
        _("moderator_main_menu", language),
        reply_markup=KeyboardFactory.main_menu(UserRole.MODERATOR, language)
    )

    await state.set_state(ModeratorStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"Admin {user_id} switched to moderator menu")


@router.callback_query(F.data == "admin:user_menu")
async def switch_to_user_menu_wrapper(callback_query: CallbackQuery, state: FSMContext, **kwargs):
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    session = kwargs.get("session")
    if not session:
        logger.error("–°–µ—Å—Å–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ switch_to_user_menu!")
        await callback_query.message.edit_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await callback_query.answer()
        return

    return await _process_switch_to_user_menu(callback_query, session, state)


async def _process_switch_to_user_menu(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    language = admin.language if admin else "ru"

    await callback_query.message.edit_text(
        _("user_main_menu", language),
        reply_markup=KeyboardFactory.main_menu(UserRole.USER, language)
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()

    logger.info(f"Admin {user_id} switched to user menu")


def register_handlers(dp: Dispatcher):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è.

    Args:
        dp: –î–∏—Å–ø–µ—Ç—á–µ—Ä
    """
    dp.include_router(router)