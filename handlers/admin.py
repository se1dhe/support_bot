import logging
from typing import Union, Dict, List, Any
from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func, desc
from sqlalchemy.orm import selectinload
from sqlalchemy.future import select

from models import User, Ticket, Message as TicketMessage, TicketStatus, MessageType, UserRole
from utils import (
    build_admin_main_menu,
    build_moderator_main_menu,
    build_user_main_menu,
    build_back_keyboard,
    build_confirm_keyboard,
    AdminStates,
    ModeratorStates,
    UserStates,
    TICKET_STATUS_EMOJI
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = Router()


@router.callback_query(F.data == "admin:stats")
async def admin_stats(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    users_stats_query = select(
        func.count(User.id).filter(User.role == UserRole.USER).label("users_count"),
        func.count(User.id).filter(User.role == UserRole.MODERATOR).label("moderators_count"),
        func.count(User.id).filter(User.role == UserRole.ADMIN).label("admins_count")
    )
    users_stats_result = await session.execute(users_stats_query)
    users_stats = users_stats_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º
    tickets_stats_query = select(
        func.count(Ticket.id).label("total_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.OPEN).label("open_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.IN_PROGRESS).label("in_progress_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.RESOLVED).label("resolved_tickets"),
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.CLOSED).label("closed_tickets"),
        func.avg(Ticket.rating).filter(Ticket.status == TicketStatus.CLOSED).label("avg_rating")
    )
    tickets_stats_result = await session.execute(tickets_stats_query)
    tickets_stats = tickets_stats_result.one()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–∫–µ—Ç–∞–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    week_ago = datetime.now() - timedelta(days=7)
    recent_tickets_query = select(
        func.count(Ticket.id).label("total_tickets")
    ).where(Ticket.created_at >= week_ago)
    recent_tickets_result = await session.execute(recent_tickets_query)
    recent_tickets_count = recent_tickets_result.scalar()

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
    moderators_query = select(
        User,
        func.count(Ticket.id).filter(Ticket.status == TicketStatus.CLOSED).label("closed_count"),
        func.avg(Ticket.rating).filter(Ticket.status == TicketStatus.CLOSED).label("avg_rating")
    ).where(
        User.role == UserRole.MODERATOR
    ).outerjoin(
        Ticket, Ticket.moderator_id == User.id
    ).group_by(
        User.id
    ).order_by(
        desc("closed_count")
    ).limit(5)
    moderators_result = await session.execute(moderators_query)
    top_moderators = moderators_result.all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
    message_text = (
        f"üìà <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_stats.users_count}\n"
        f"üîë –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã: {users_stats.moderators_count}\n"
        f"üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {users_stats.admins_count}\n\n"

        f"<b>–¢–∏–∫–µ—Ç—ã:</b>\n"
        f"üìä –í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤: {tickets_stats.total_tickets}\n"
        f"üÜï –û—Ç–∫—Ä—ã—Ç—ã—Ö: {tickets_stats.open_tickets}\n"
        f"üîÑ –í —Ä–∞–±–æ—Ç–µ: {tickets_stats.in_progress_tickets}\n"
        f"‚úÖ –†–µ—à–µ–Ω–Ω—ã—Ö (–æ–∂–∏–¥–∞—é—Ç –æ—Ü–µ–Ω–∫–∏): {tickets_stats.resolved_tickets}\n"
        f"üîí –ó–∞–∫—Ä—ã—Ç—ã—Ö: {tickets_stats.closed_tickets}\n"
        f"üìÖ –ù–æ–≤—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π: {recent_tickets_count}\n"
        f"‚≠ê –°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {tickets_stats.avg_rating:.2f if tickets_stats.avg_rating else '–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫'}/5.0\n\n"
    )

    if top_moderators:
        message_text += "<b>–¢–æ–ø –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        for i, (moderator, closed_count, avg_rating) in enumerate(top_moderators, 1):
            avg_rating_text = f"{avg_rating:.2f}/5.0" if avg_rating else "–ù–µ—Ç –æ—Ü–µ–Ω–æ–∫"
            message_text += (
                f"{i}. {moderator.full_name} - {closed_count} —Ç–∏–∫–µ—Ç–æ–≤, "
                f"—Ä–µ–π—Ç–∏–Ω–≥: {avg_rating_text}\n"
            )

    await callback_query.message.edit_text(
        message_text,
        reply_markup=build_back_keyboard("admin:back_to_menu")
    )

    await state.set_state(AdminStates.VIEWING_STATISTICS)
    await callback_query.answer()

    logger.info(f"Admin {user_id} viewed general statistics")


@router.callback_query(F.data == "admin:manage_mods")
async def manage_moderators(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    query = select(User).where(User.telegram_id == user_id)
    result = await session.execute(query)
    admin = result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    message_text = "üë®‚Äçüíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏</b>\n\n"

    if not moderators:
        message_text += "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤."
    else:
        message_text += "<b>–¢–µ–∫—É—â–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã:</b>\n\n"
        for i, mod in enumerate(moderators, 1):
            message_text += f"{i}. {mod.full_name} (ID: {mod.telegram_id})\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin:add_moderator"))

    if moderators:
        kb.add(InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞", callback_data="admin:remove_moderator"))

    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back_to_menu"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    kb.adjust(1)

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(AdminStates.MANAGING_MODERATORS)
    await callback_query.answer()


@router.callback_query(F.data == "admin:add_moderator")
async def add_moderator_start(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    await callback_query.message.edit_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, "
        "–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ.</i>",
        reply_markup=build_back_keyboard("admin:back_to_manage_mods")
    )

    await state.set_state(AdminStates.ADDING_MODERATOR)
    await callback_query.answer()


@router.message(AdminStates.ADDING_MODERATOR, F.text)
async def process_add_moderator(message: Message, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç - —á–∏—Å–ª–æ
    try:
        new_moderator_id = int(message.text.strip())
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_query = select(User).where(User.telegram_id == new_moderator_id)
    user_result = await session.execute(user_query)
    user = user_result.scalar_one_or_none()

    if not user:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ (–≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start).",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        return

    if user.role == UserRole.ADMIN:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        return

    if user.role == UserRole.MODERATOR:
        await message.answer(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"admin:confirm_add_mod:{new_moderator_id}"))
    kb.add(InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="admin:back_to_manage_mods"))

    await message.answer(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.full_name} "
        f"(ID: {user.telegram_id}) –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º?",
        reply_markup=kb.as_markup()
    )


@router.callback_query(F.data.startswith("admin:confirm_add_mod:"))
async def confirm_add_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = callback_query.from_user.id
    new_moderator_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user_query = select(User).where(User.telegram_id == new_moderator_id)
    user_result = await session.execute(user_query)
    user = user_result.scalar_one_or_none()

    if not user:
        await callback_query.message.edit_text(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        await callback_query.answer()
        return

    # –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º
    user.role = UserRole.MODERATOR
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (ID: {user.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.",
        reply_markup=build_back_keyboard("admin:back_to_manage_mods")
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=user.telegram_id,
            text=f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b>\n\n"
                 f"–í—ã –±—ã–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                 f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ç–∏–∫–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n\n"
                 f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to new moderator {user.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} added new moderator {new_moderator_id}")


@router.callback_query(F.data == "admin:remove_moderator")
async def remove_moderator_start(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = callback_query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == user_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    moderators_query = select(User).where(User.role == UserRole.MODERATOR)
    moderators_result = await session.execute(moderators_query)
    moderators = moderators_result.scalars().all()

    if not moderators:
        await callback_query.message.edit_text(
            "–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        await callback_query.answer()
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    message_text = "‚ùå <b>–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
    message_text += "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
    kb = InlineKeyboardBuilder()

    for mod in moderators:
        kb.add(InlineKeyboardButton(
            text=f"{mod.full_name} (ID: {mod.telegram_id})",
            callback_data=f"admin:confirm_remove_mod:{mod.telegram_id}"
        ))

    kb.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="admin:back_to_manage_mods"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Å—Ç–æ–ª–±–µ—Ü
    kb.adjust(1)

    await callback_query.message.edit_text(
        message_text,
        reply_markup=kb.as_markup()
    )

    await state.set_state(AdminStates.REMOVING_MODERATOR)
    await callback_query.answer()


@router.callback_query(F.data.startswith("admin:confirm_remove_mod:"))
async def confirm_remove_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    admin_id = callback_query.from_user.id
    moderator_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    mod_query = select(User).where(User.telegram_id == moderator_id)
    mod_result = await session.execute(mod_query)
    moderator = mod_result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        await callback_query.answer()
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã
    active_tickets_query = select(func.count(Ticket.id)).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status.in_([TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    )
    active_tickets_result = await session.execute(active_tickets_query)
    active_tickets_count = active_tickets_result.scalar()

    if active_tickets_count > 0:
        # –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        kb = InlineKeyboardBuilder()
        kb.add(InlineKeyboardButton(
            text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å –∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–∏–∫–µ—Ç—ã",
            callback_data=f"admin:force_remove_mod:{moderator_id}"
        ))
        kb.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin:back_to_manage_mods"))

        await callback_query.message.edit_text(
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>\n\n"
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} –∏–º–µ–µ—Ç {active_tickets_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n\n"
            f"–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ, –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ—á–µ—Ä–µ–¥—å –Ω–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤.\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞?",
            reply_markup=kb.as_markup()
        )
        await callback_query.answer()
        return

    # –†–∞–∑–∂–∞–ª—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    moderator.role = UserRole.USER
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} (ID: {moderator.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.",
        reply_markup=build_back_keyboard("admin:back_to_manage_mods")
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=moderator.telegram_id,
            text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                 f"–í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to former moderator {moderator.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} removed moderator {moderator_id}")


@router.callback_query(F.data.startswith("admin:force_remove_mod:"))
async def force_remove_moderator(callback_query: CallbackQuery, bot: Bot, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–∏–∫–µ—Ç–∞–º–∏
    """
    admin_id = callback_query.from_user.id
    moderator_id = int(callback_query.data.split(":")[2])

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –∏–∑ –ë–î
    admin_query = select(User).where(User.telegram_id == admin_id)
    admin_result = await session.execute(admin_query)
    admin = admin_result.scalar_one_or_none()

    if not admin or admin.role != UserRole.ADMIN:
        await callback_query.message.edit_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑ –ë–î
    mod_query = select(User).where(User.telegram_id == moderator_id)
    mod_result = await session.execute(mod_query)
    moderator = mod_result.scalar_one_or_none()

    if not moderator or moderator.role != UserRole.MODERATOR:
        await callback_query.message.edit_text(
            f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä —Å ID {moderator_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=build_back_keyboard("admin:back_to_manage_mods")
        )
        await callback_query.answer()
        return

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    active_tickets_query = select(Ticket).where(
        (Ticket.moderator_id == moderator.id) &
        (Ticket.status.in_([TicketStatus.IN_PROGRESS, TicketStatus.RESOLVED]))
    ).options(selectinload(Ticket.user))
    active_tickets_result = await session.execute(active_tickets_query)
    active_tickets = active_tickets_result.scalars().all()

    # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ç–∏–∫–µ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    for ticket in active_tickets:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–µ
        ticket.status = TicketStatus.OPEN
        ticket.moderator_id = None

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏
        system_message = TicketMessage(
            ticket_id=ticket.id,
            sender_id=admin.id,
            message_type=MessageType.SYSTEM,
            text=f"–¢–∏–∫–µ—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ {moderator.full_name}"
        )
        session.add(system_message)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            await bot.send_message(
                chat_id=ticket.user.telegram_id,
                text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–∫–µ—Ç—É #{ticket.id}</b>\n\n"
                     f"–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n"
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ, –∫–æ–≥–¥–∞ –¥—Ä—É–≥–æ–π –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç –≤–∞—à —Ç–∏–∫–µ—Ç –≤ —Ä–∞–±–æ—Ç—É."
            )
        except Exception as e:
            logger.error(f"Failed to send notification to user {ticket.user.telegram_id}: {e}")

    # –†–∞–∑–∂–∞–ª—É–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ –æ–±—ã—á–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    moderator.role = UserRole.USER
    await session.commit()

    await callback_query.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {moderator.full_name} (ID: {moderator.telegram_id}) "
        f"—É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.\n\n"
        f"–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã ({len(active_tickets)}) –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.",
        reply_markup=build_back_keyboard("admin:back_to_manage_mods")
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –±—ã–≤—à–µ–≥–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        await bot.send_message(
            chat_id=moderator.telegram_id,
            text=f"‚ÑπÔ∏è <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                 f"–í–∞—à–∏ –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
                 f"–í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã –±—ã–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å.\n"
                 f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å."
        )
    except Exception as e:
        logger.error(f"Failed to send notification to former moderator {moderator.telegram_id}: {e}")

    await callback_query.answer()

    logger.info(f"Admin {admin_id} force removed moderator {moderator_id} with active tickets")


@router.callback_query(F.data == "admin:back_to_menu")
async def back_to_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    await callback_query.message.edit_text(
        "üëë <b>–ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_admin_main_menu()
    )

    await state.set_state(AdminStates.MAIN_MENU)
    await callback_query.answer()


@router.callback_query(F.data == "admin:back_to_manage_mods")
async def back_to_manage_mods(callback_query: CallbackQuery, session: AsyncSession, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    """
    await state.set_state(AdminStates.MANAGING_MODERATORS)
    await manage_moderators(callback_query, session, state)


@router.callback_query(F.data == "admin:mod_menu")
async def switch_to_mod_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    """
    await callback_query.message.edit_text(
        "üîë <b>–ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_moderator_main_menu()
    )

    await state.set_state(ModeratorStates.MAIN_MENU)
    await callback_query.answer()


@router.callback_query(F.data == "admin:user_menu")
async def switch_to_user_menu(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    await callback_query.message.edit_text(
        "üë§ <b>–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
        reply_markup=build_user_main_menu()
    )

    await state.set_state(UserStates.MAIN_MENU)
    await callback_query.answer()