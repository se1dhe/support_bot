from typing import List

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from i18n_setup import gettext as _
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models import TicketStatus, UserRole


def build_language_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.
    """
    kb = InlineKeyboardBuilder()

    kb.add(InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="language:ru"))
    kb.add(InlineKeyboardButton(text="üá¨üáß English", callback_data="language:en"))
    kb.add(InlineKeyboardButton(text="üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", callback_data="language:uk"))

    return kb.as_markup()


def build_user_main_menu() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    kb = InlineKeyboardBuilder()

    kb.add(InlineKeyboardButton(text=_("‚úèÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç"), callback_data="user:create_ticket"))
    kb.add(InlineKeyboardButton(text=_("üìã –ò—Å—Ç–æ—Ä–∏—è —Ç–∏–∫–µ—Ç–æ–≤"), callback_data="user:ticket_history"))
    kb.add(InlineKeyboardButton(text=_("üìù –ê–∫—Ç–∏–≤–Ω—ã–π —Ç–∏–∫–µ—Ç"), callback_data="user:active_ticket"))
    kb.add(InlineKeyboardButton(text=_("üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"), callback_data="user:change_language"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    kb.adjust(2)

    return kb.as_markup()


def build_moderator_main_menu() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    kb = InlineKeyboardBuilder()

    kb.add(InlineKeyboardButton(text=_("üì® –ù–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç—ã"), callback_data="mod:unassigned_tickets"))
    kb.add(InlineKeyboardButton(text=_("üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–∏–∫–µ—Ç"), callback_data="mod:reassign_ticket"))
    kb.add(InlineKeyboardButton(text=_("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), callback_data="mod:my_stats"))
    kb.add(InlineKeyboardButton(text=_("üë§ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), callback_data="mod:user_menu"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    kb.adjust(2)

    return kb.as_markup()


def build_admin_main_menu() -> InlineKeyboardMarkup:
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∞.
    """
    kb = InlineKeyboardBuilder()

    kb.add(InlineKeyboardButton(text=_("üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), callback_data="admin:stats"))
    kb.add(InlineKeyboardButton(text=_("üë®‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º–∏"), callback_data="admin:manage_mods"))
    kb.add(InlineKeyboardButton(text=_("üîë –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞"), callback_data="admin:mod_menu"))
    kb.add(InlineKeyboardButton(text=_("üë§ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"), callback_data="admin:user_menu"))

    # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
    kb.adjust(2)

    return kb.as_markup()


def build_ticket_actions_keyboard(ticket_status: TicketStatus) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∏–∫–µ—Ç–æ–º.
    """
    kb = InlineKeyboardBuilder()

    if ticket_status == TicketStatus.OPEN:
        kb.add(InlineKeyboardButton(text=_("‚úÖ –ü—Ä–∏–Ω—è—Ç—å —Ç–∏–∫–µ—Ç"), callback_data="ticket:take"))
    elif ticket_status == TicketStatus.IN_PROGRESS:
        kb.add(InlineKeyboardButton(text=_("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ —Ä–µ—à—ë–Ω–Ω—ã–π"), callback_data="ticket:resolve"))
        kb.add(InlineKeyboardButton(text=_("üîÑ –ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å"), callback_data="ticket:reassign"))
    elif ticket_status == TicketStatus.RESOLVED:
        kb.add(InlineKeyboardButton(text=_("‚≠ê –û—Ü–µ–Ω–∏—Ç—å –∏ –∑–∞–∫—Ä—ã—Ç—å"), callback_data="ticket:rate"))

    kb.add(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="ticket:back"))

    return kb.as_markup()


def build_rating_keyboard() -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.
    """
    kb = InlineKeyboardBuilder()

    for i in range(1, 6):
        stars = "‚≠ê" * i
        kb.add(InlineKeyboardButton(text=stars, callback_data=f"rating:{i}"))

    return kb.as_markup()


def build_moderator_list_keyboard(moderators: List[dict]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.
    """
    kb = InlineKeyboardBuilder()

    for mod in moderators:
        name = mod.get("full_name", f"ID: {mod.get('telegram_id')}")
        kb.add(InlineKeyboardButton(
            text=name,
            callback_data=f"moderator:{mod.get('id')}"
        ))

    kb.add(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="moderator:back"))

    return kb.as_markup()


def build_tickets_list_keyboard(tickets: List[dict], page: int = 0, page_size: int = 5) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–∏–∫–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    kb = InlineKeyboardBuilder()

    # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(tickets))

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    for i in range(start_idx, end_idx):
        ticket = tickets[i]
        ticket_id = ticket.get("id")
        status = ticket.get("status", TicketStatus.OPEN)

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ —Ç–∏–∫–µ—Ç–∞
        status_emoji = {
            TicketStatus.OPEN: "üÜï",
            TicketStatus.IN_PROGRESS: "üîÑ",
            TicketStatus.RESOLVED: "‚úÖ",
            TicketStatus.CLOSED: "üîí"
        }.get(status, "‚ùì")

        kb.add(InlineKeyboardButton(
            text=f"{status_emoji} –¢–∏–∫–µ—Ç #{ticket_id}",
            callback_data=f"ticket:{ticket_id}"
        ))

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    row = []
    if page > 0:
        row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"page:{page - 1}"))

    row.append(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data="tickets:back"))

    if end_idx < len(tickets):
        row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"page:{page + 1}"))

    kb.row(*row)

    return kb.as_markup()


def build_back_keyboard(callback_data: str = "back") -> InlineKeyboardMarkup:
    """
    –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".
    """
    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(text=_("üîô –ù–∞–∑–∞–¥"), callback_data=callback_data))
    return kb.as_markup()


def build_confirm_keyboard(action: str) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.
    """
    kb = InlineKeyboardBuilder()

    kb.add(InlineKeyboardButton(text=_("‚úÖ –î–∞"), callback_data=f"confirm:{action}"))
    kb.add(InlineKeyboardButton(text=_("‚ùå –ù–µ—Ç"), callback_data=f"cancel:{action}"))

    return kb.as_markup()