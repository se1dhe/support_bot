from typing import List, Optional, Union, Dict, Any
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder

from models import TicketStatus, UserRole
from utils.i18n import _


class KeyboardFactory:
    """
    –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä –±–æ—Ç–∞.
    –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä.
    """

    @staticmethod
    def language_selection(user_language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞.

        Args:
            user_language: –¢–µ–∫—É—â–∏–π —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞)

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
        """
        kb = InlineKeyboardBuilder()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —è–∑—ã–∫ —Å–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω)
        ru_text = "üá∑üá∫ –†—É—Å—Å–∫–∏–π" + (" ‚úì" if user_language == "ru" else "")
        en_text = "üá¨üáß English" + (" ‚úì" if user_language == "en" else "")
        uk_text = "üá∫üá¶ –£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" + (" ‚úì" if user_language == "uk" else "")

        kb.add(InlineKeyboardButton(text=ru_text, callback_data="language:ru"))
        kb.add(InlineKeyboardButton(text=en_text, callback_data="language:en"))
        kb.add(InlineKeyboardButton(text=uk_text, callback_data="language:uk"))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–ª —è–∑—ã–∫
        if user_language:
            kb.add(InlineKeyboardButton(
                text=_("action_back", user_language),
                callback_data="user:back_to_menu"
            ))

        return kb.as_markup()

    @staticmethod
    def main_menu(role: UserRole, language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        """
        kb = InlineKeyboardBuilder()

        if role == UserRole.USER:
            kb.add(InlineKeyboardButton(
                text=_("menu_create_ticket", language),
                callback_data="user:create_ticket"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_ticket_history", language),
                callback_data="user:ticket_history"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_active_ticket", language),
                callback_data="user:active_ticket"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_change_language", language),
                callback_data="user:change_language"
            ))
        elif role == UserRole.MODERATOR:
            kb.add(InlineKeyboardButton(
                text=_("menu_unassigned_tickets", language),
                callback_data="mod:unassigned_tickets"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_reassign_ticket", language),
                callback_data="mod:reassign_ticket"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_my_stats", language),
                callback_data="mod:my_stats"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_user_menu", language),
                callback_data="mod:user_menu"
            ))
        elif role == UserRole.ADMIN:
            kb.add(InlineKeyboardButton(
                text=_("menu_general_stats", language),
                callback_data="admin:stats"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_manage_moderators", language),
                callback_data="admin:manage_mods"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_moderator_menu", language),
                callback_data="admin:mod_menu"
            ))
            kb.add(InlineKeyboardButton(
                text=_("menu_user_menu", language),
                callback_data="admin:user_menu"
            ))

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞
        kb.adjust(2)

        return kb.as_markup()

    @staticmethod
    def main_reply_keyboard(role: UserRole, language: str = None) -> ReplyKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            role: –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            ReplyKeyboardMarkup: Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        """
        # –ë–∞–∑–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
        buttons = [[KeyboardButton(text="üìã –ú–µ–Ω—é")]]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏
        if role == UserRole.USER:
            buttons[0].append(KeyboardButton(text=_("menu_active_ticket", language)))
            buttons.append([
                KeyboardButton(text=_("menu_create_ticket", language)),
                KeyboardButton(text=_("menu_ticket_history", language))
            ])
        elif role == UserRole.MODERATOR:
            buttons[0].append(KeyboardButton(text=_("menu_active_ticket", language)))
            buttons.append([
                KeyboardButton(text=_("menu_unassigned_tickets", language)),
                KeyboardButton(text=_("menu_my_stats", language))
            ])
        elif role == UserRole.ADMIN:
            buttons[0].append(KeyboardButton(text=_("menu_general_stats", language)))
            buttons.append([
                KeyboardButton(text=_("menu_manage_moderators", language)),
                KeyboardButton(text="üîç –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ç–∞")
            ])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å resize_keyboard=True, —á—Ç–æ–±—ã –æ–Ω–∞ –Ω–µ –∑–∞–Ω–∏–º–∞–ª–∞ –º–Ω–æ–≥–æ –º–µ—Å—Ç–∞
        return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

    @staticmethod
    def ticket_actions(ticket_status: TicketStatus, ticket_id: int, language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è —Ç–∏–∫–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.

        Args:
            ticket_status: –°—Ç–∞—Ç—É—Å —Ç–∏–∫–µ—Ç–∞
            ticket_id: ID —Ç–∏–∫–µ—Ç–∞
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        """
        kb = InlineKeyboardBuilder()

        if ticket_status == TicketStatus.OPEN:
            kb.add(InlineKeyboardButton(
                text=_("action_take_ticket", language),
                callback_data=f"mod:take_ticket:{ticket_id}"
            ))
        elif ticket_status == TicketStatus.IN_PROGRESS:
            kb.add(InlineKeyboardButton(
                text=_("action_mark_resolved", language),
                callback_data=f"mod:resolve_ticket:{ticket_id}"
            ))
            kb.add(InlineKeyboardButton(
                text=_("action_reassign", language),
                callback_data=f"mod:reassign_ticket:{ticket_id}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        kb.add(InlineKeyboardButton(
            text=_("action_back", language),
            callback_data="mod:back_to_menu"
        ))

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ –æ–¥–Ω–æ–π –≤ —Å—Ç—Ä–æ–∫–µ
        kb.adjust(1)

        return kb.as_markup()

    @staticmethod
    def rating_keyboard(language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞.

        Args:
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Ü–µ–Ω–∫–∞–º–∏
        """
        kb = InlineKeyboardBuilder()

        for i in range(1, 6):
            kb.add(InlineKeyboardButton(
                text=_(f"rating_{i}", language),
                callback_data=f"rating:{i}"
            ))

        # –†–∞–∑–º–µ—â–∞–µ–º –≤—Å–µ 5 –∫–Ω–æ–ø–æ–∫ –≤ –æ–¥–∏–Ω —Ä—è–¥
        kb.adjust(5)

        return kb.as_markup()

    @staticmethod
    def back_button(callback_data: str = "back_to_menu", language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥".

        Args:
            callback_data: Callback-–¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
        """
        kb = InlineKeyboardBuilder()

        kb.add(InlineKeyboardButton(
            text=_("action_back", language),
            callback_data=callback_data
        ))

        return kb.as_markup()

    @staticmethod
    def confirmation_keyboard(action: str, language: str = None) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è.

        Args:
            action: –î–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (callback data)
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
        """
        kb = InlineKeyboardBuilder()

        kb.add(InlineKeyboardButton(
            text=_("confirm_yes", language),
            callback_data=f"confirm:{action}"
        ))
        kb.add(InlineKeyboardButton(
            text=_("confirm_no", language),
            callback_data=f"cancel:{action}"
        ))

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–∏–Ω —Ä—è–¥
        kb.adjust(2)

        return kb.as_markup()

    @staticmethod
    def paginated_list(
            items: List[Dict[str, Any]],
            current_page: int,
            page_size: int = 5,
            action_prefix: str = "item",
            back_callback: str = "back_to_menu",
            language: str = None
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.

        Args:
            items: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–Ω–∞—á–∏–Ω–∞—è —Å 0)
            page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            action_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback –¥–∞–Ω–Ω—ã—Ö
            back_callback: Callback –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
            language: –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        """
        kb = InlineKeyboardBuilder()

        # –í—ã—á–∏—Å–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(items) + page_size - 1) // page_size if items else 0
        start_idx = current_page * page_size
        end_idx = min(start_idx + page_size, len(items))

        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        for i in range(start_idx, end_idx):
            item = items[i]
            item_id = item.get("id")
            item_text = item.get("text", f"Item #{item_id}")

            kb.add(InlineKeyboardButton(
                text=item_text,
                callback_data=f"{action_prefix}:{item_id}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        row = []

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" (–ø—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if current_page > 0:
            row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è",
                callback_data=f"page:{current_page - 1}"
            ))

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
        row.append(InlineKeyboardButton(
            text=_("action_back", language),
            callback_data=back_callback
        ))

        # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥" (—Å–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
        if current_page < total_pages - 1:
            row.append(InlineKeyboardButton(
                text="‚ñ∂Ô∏è",
                callback_data=f"page:{current_page + 1}"
            ))

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –æ–¥–Ω–∏–º —Ä—è–¥–æ–º
        kb.row(*row)

        return kb.as_markup()